<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LYsnowQの博客小屋</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2024-01-07T13:17:46.425Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>LYsnowQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>历史纲要</title>
    <link href="https://www.fomal.cc/posts/b614c4c.html"/>
    <id>https://www.fomal.cc/posts/b614c4c.html</id>
    <published>2023-12-26T00:47:42.252Z</published>
    <updated>2024-01-07T13:17:46.425Z</updated>
    
    <content type="html"><![CDATA[<h1>第一章 进入近代后中华民族的磨难与抗争</h1><h2 id="第一节-鸦片战争前后的中国与世界（p13）">第一节  鸦片战争前后的中国与世界（p13）</h2><h3 id="1-鸦片战争的爆发">1. 鸦片战争的爆发</h3><hr><ul><li><p><strong>什么是鸦片战争</strong>：鸦片战争是1840-1842年以清政府战败，签订中国近代史上第一个不平等条约-《南京条约》而告终的战争，是中国沦为半殖民地半封建社会的开始的一次历史性的战争。国内矛盾从封建主义与人民大众矛盾转化为帝国主义与中华民族之间的矛盾。</p></li><li><p><strong>为什么说鸦片战争是中国近代史的起点</strong>：因为外国的资本主义入侵中国的封建社会逐步沦为半殖民地半封建社会，中国人民逐步开始了反帝反封建的资产阶级民主革命。矛盾由封建主义与人民大众的矛盾转化为帝国主义与中华民族之间的矛盾。</p></li><li><p><strong>占主要支配地位的矛盾</strong>：帝国主义和中华民族的矛盾（最主要）封建主义与人民大众的矛盾</p></li><li><p><strong>任务目标</strong>：为了使中国站起来，使人民过上幸福、富裕生活，就必须推翻帝国主义封建主义联合统治的半殖民地半封建社会制度，争取民族独立和人民解放。</p></li></ul><hr><h2 id="第四节-反侵略抗争的失败与民族意识的觉醒（p41）">第四节 反侵略抗争的失败与民族意识的觉醒（p41）</h2><h3 id="1-反侵略战争的失败及其原因">1. 反侵略战争的失败及其原因</h3><hr><ul><li><strong>失败的原因</strong>：</li></ul><p>​<strong>内部</strong>：社会制度的腐败（根本原因）经济技术的落后</p><p>​<strong>外部</strong>：帝国主义的实力过于强大</p><ul><li><strong>体现</strong>：</li></ul><p>​<strong>制度腐败</strong>：官员统治者为了一己私欲，出卖国家和民族利益；常常压制与破坏人民群众和爱国官兵的反侵略斗争。</p><p>​<strong>经济技术的落后</strong>：多数清军使用冷兵器，火枪也是火绳点放。英军则普遍使用步枪。</p><h3 id="2-民族意识觉醒：">2. 民族意识觉醒：</h3><hr><ul><li><p><strong>林则徐（近代中国睁眼看世界第一人）：《四洲志》</strong></p></li><li><p><strong>魏源：《海国图志》（1843.1）提出：“师夷长技以制夷”</strong><strong><strong>（开创了中国近代向西方学习的新风）</strong></strong></p></li></ul><blockquote><p>甲午战争后，中国人才开始有了普遍觉醒，接踵而来的瓜分潮，使中华民族的各阶级，各阶层产生了亡国灭种的危机感，并在此基础上形成了中华民族整体民族利益休戚与共的民族认同感。</p></blockquote><ul><li><p><strong>严复：用“物竞天择”“适者生存”社会进化思想，为危机意识和民族意识提供了理论根据。</strong></p></li><li><p><strong>什么是中国近代史</strong>：</p><ol><li>是一部充满磨难、落后挨打的悲惨屈辱史。</li><li>是一部中华民族抵抗外来侵略、实现民族独立的伟大斗争史。</li><li>是一部先进的中国人救亡图存，实现民族复兴的艰辛探索史。</li></ol></li></ul><hr><h1>第二章 不同社会力量对国家出路的早期探索</h1><h2 id="第一节-太平天国运动的起落（p49）">第一节 太平天国运动的起落（p49）</h2><h3 id="1-太平天国农民战争">1. 太平天国农民战争</h3><hr><ul><li><strong>太平天国背景</strong>：<ol><li>中国农民长期受到地主阶级压迫。</li><li>鸦片战争失败后政府为了填补财政亏空，加重收税。</li><li>鸦片贸易导致银贵钱轻现象更加严重，加重农民负担。</li></ol></li><li><strong>什么是太平天国运动</strong>：是一次对清政府腐朽统治和地主阶级压迫、剥削的正义战争。坚决打击镇压官僚，地主等，有力地冲击了封建统治秩序。</li><li><strong>最能体现太平天国社会理想和这次农民起义特色纲领文件</strong>：《天朝田亩制度》</li><li><strong>《天朝田亩制度》地位</strong>：是一个以解决土地问题为中心的比较完整的社会改革方案。</li><li><strong>《天朝田亩制度》性质</strong>：<ol><li>从根本上否定了封建土地所有制。</li><li>所描绘的仍然是自给自足的自然经济，是小农业和家庭手工业相结合的传统生活方式同时没有商品交换的绝对平均社会。</li><li>很大程度上具有不切实际的空想性质。</li></ol></li><li><strong>《资政新篇》地位</strong>：是太平天国后期颁布的中国近代史上第一个比较系统的社会发展方案。</li></ul><hr><h2 id="第二节-洋务运动兴衰（p55）">第二节 洋务运动兴衰（p55）</h2><h3 id="1-洋务事业的兴办">1. 洋务事业的兴办</h3><hr><p><strong>洋务运动开始：1861 总理衙门设立结束：1895 北洋舰队覆灭</strong></p><ul><li><p><strong>什么是洋务运动</strong>：洋务运动是封建统治阶级为了自救而推行的以，引进西方技术，以中国制度为主体的自强求富运动。是中国近代化的开端。</p></li><li><p><strong>洋务运动思想</strong>：以封建统治秩序为主体用西方近代工业技术为辅助。（中体西用）</p></li><li><p><strong>洋务运动地位</strong>：洋务运动是清政府第一次改革运动，是中国近代化开端。</p></li><li><p><strong>主要内容</strong>：</p></li></ul><p>​（一）兴办近代企业：</p><p>​军用工业（官办）：安庆军械所、江南制造总局等</p><p>​民用企业（官督民办）：轮船招商局等</p><p>​（二）建立新式海军：</p><p>​北洋水师（主力）、福建水师、广东水师、南洋水师</p><p>​（三）创办新式学堂，派遣留学生：</p><p>​翻译学堂（京师同文馆、上海方言馆）、工艺学堂、军事学堂</p><p>​赴美幼童和官费赴欧洲留学生200多人</p><hr><h2 id="第三节-维新运动的兴起和夭折（p59）">第三节 维新运动的兴起和夭折（p59）</h2><h3 id="1-戊戌维新运动的开展">1. 戊戌维新运动的开展</h3><hr><ul><li><strong>背景</strong>：<ol><li>洋务运动和甲午战争的失败。</li><li>民族资本初步发展。</li><li>“实业救国”思想潮兴起。</li></ol></li><li><strong>什么是公车上书</strong>：以康有为、梁启超为代表的资产阶级维新派为了让皇帝推行变法，拯救国家而联合1300多名举人共同向皇帝上书，是戊戌变法的开端。</li></ul><p><strong>康有为：《新学伪经考》《孔子改制考》</strong></p><p><strong>梁启超：《变法通议》</strong></p><p><strong>谭嗣同：《仁学》</strong></p><p><strong>严复：《天演论》</strong></p><ul><li><p><strong>维新派与守旧派论战内容</strong>：</p><ol><li>要不要变法。</li><li>要不要兴民权、设议院，实行君主立宪。</li><li>要不要废八股、改科举和兴西学。</li></ol></li><li><p><strong>论战意义</strong>：是资产阶级思想与封建主义思想在中国的第一次正面交锋，进一步开阔了新型知识分子的眼界，解放了人们长期收到的束缚的思想。</p></li></ul><hr><h1>第三章 辛亥革命与君主专制制度的终结</h1><h2 id="第二节-辛亥革命与中华民国的建立（p77）">第二节 辛亥革命与中华民国的建立（p77）</h2><h3 id="1-辛亥革命的爆发与清王朝的覆灭">1. 辛亥革命的爆发与清王朝的覆灭</h3><hr><ul><li><strong>影响最大的武装起义</strong>：1911年4月广州起义。</li></ul><blockquote><p><strong>1911年10月10日 武昌起义</strong></p></blockquote><ul><li><strong>资产阶级革命性质</strong>：优点：革命性和勇敢精神缺点：软弱性和妥协性</li><li><strong>南京临时政府性质</strong>：资产阶级共和国性质的革命政权。</li><li><strong>南京政府局限性</strong>：没有提出任何可以满足农民的政策和措施，维护封建土地制度和官僚地主所占有土地和财产。</li><li><strong>《中华民国临时约法》的性质</strong>：中国历史上第一部具有资产阶级共和国宪法性质的法典。</li><li><strong>辛亥革命历史意义</strong>：<ol><li>是一次比较完全意义上的资产阶级民主革命。</li><li>推翻了清王朝的统治，沉重打击了中外反动势力。</li><li>结束了中华民族两千多年的封建君主专制制度，建立了中国历史上第一个资产阶级共和政府，使民主共和的观念深入人心。</li><li>推动了中国人民思想解放。</li><li>推动了中国社会变革，促使中国社会经济，思想习惯和社会风俗等方面发生了新的积极变化。</li><li>一定程度上打击了外国侵略势力，推动了亚洲各民族的解放运动高潮。</li></ol></li></ul><hr><h2 id="第三节-北洋军阀的统治与旧民主主义革命的失败-（p82）">第三节 北洋军阀的统治与旧民主主义革命的失败 （p82）</h2><h3 id="2-旧民主主义革命的失败">2. 旧民主主义革命的失败</h3><hr><p><strong>辛亥革命失败的原因和教训</strong>：</p><p>主观上：</p><ol><li>半殖民地半封建的中国，资本主义的建国方案行不通。（根本原因）</li><li>没有提出彻底的反帝反封建革命纲领。</li><li>不能充分发动和依靠人民。</li><li>不能建立坚强的革命政党，作为团结一切革命力量的强有力的核心。</li><li>中国民族资产阶级的软弱性和妥协性。</li></ol><p>客观上：帝国主义过于强大。</p><hr><h1>第四章 中国共产党成立和中国革命新局面</h1><h2 id="第一节-新文化运动和五四运动-p91">第一节 新文化运动和五四运动 (p91)</h2><h3 id="1-新文化运动与思想解放潮流">1. 新文化运动与思想解放潮流</h3><hr><ul><li><strong>什么是新文化运动</strong>：在辛亥革命和北洋军阀的统治下，为了挽救民族危亡，中国先进的知识分子为了改造国民性，将人们从封建思想中解放出来，从而发动的一场思想启蒙运动。开始标志为陈独秀创办《新青年》，后来迁移到北京，鲁迅李大钊也参与进去。北京大学成为新文化运动主阵地。</li><li><strong>新文化运动内容</strong>：提倡新道德，反对旧道德；提倡新文学，反对旧文学；提倡民主，反对专制；提倡科学，反对迷信。</li><li><strong>新文化运动意义</strong>：<ol><li>通过批判孔学，动摇了封建正统思想的统治地位，实现了思想解放。</li><li>在封建主义统治下对资产阶级民主主义的提倡仍然具有作用。</li></ol></li><li><strong>新文化运动局限性</strong>：<ol><li>批判孔学为发展资本主义扫清障碍。</li><li>倡导者把国民优先性置于优先地位。</li><li>许多人物没有马克思主义批判精神，看问题比较片面。</li></ol></li></ul><hr><h3 id="3-五四运动：新民主主义革命的开端">3. 五四运动：新民主主义革命的开端</h3><hr><ul><li><p><strong>五四运动背景</strong>：</p><ol><li>是新的社会力量的成长壮大。</li><li>新文化运动的思想解放潮流。</li><li>俄国十月革命的影响</li></ol></li><li><p><strong>什么是五四运动</strong>：是以巴黎和会上外交失败为导火索，在爱国学生被镇压后，随后工人阶级参与斗争，重心由北京转向上海，北洋政府在迫于压力下释放被捕学生，最后达到在巴黎和约拒绝签字为目的的，工人阶级第一次登上历史舞台的爱国革命运动。</p></li><li><p><strong>五四运动特点</strong>：以先进青年知识分子为先锋，广大人民群众参加的彻底的反帝反封建的伟大爱国革命运动。是一场中国人民为拯救民族危亡、捍卫民族尊严、凝聚民族力量而掀起的伟大社会革命运动，是一场传播新思想新文化新知识的伟大思想启蒙运动。</p></li><li><p><strong>五四运动意义</strong>：</p><ol><li>是旧民主主义革命走向新民主主义革命的转折点。</li><li>孕育了以爱国、进步、民主、科学为主要内容的伟大五四精神，核心为爱国主义。</li><li>实现了中国人民和中华民族自鸦片战争以来的第一次全面觉醒。</li><li>五四运动培育了永久奋斗的伟大精神。</li></ol></li></ul><hr><h2 id="第二节-马克思主义广泛传播与中国共产党的诞生-p98">第二节 马克思主义广泛传播与中国共产党的诞生 (p98)</h2><h3 id="3-中国共产党第一次全国代表大会的召开与中国共产党的成立">3. 中国共产党第一次全国代表大会的召开与中国共产党的成立</h3><hr><blockquote><p><strong>中共一大的召开 1921年7月23日 ，确立了名称为中国共产党，明确“革命军队必须与无产阶级一起推翻资本家阶级政权”，设立中央局为中央的临时领导机构 ，陈独秀为书记 ，它代表着中国广大人民群众的利益，将为人民谋幸福为中华民族谋复兴为自己初心使命。</strong></p></blockquote><ul><li><p><strong>中国共产党成立历史特点</strong>：</p><ol><li><p>成立于俄国十月革命胜利后，接受的是修正后的，完整的科学世界观和革命论的马克思主义。</p></li><li><p>在双半的中国产生，中国工农阶级收到封建势力、帝国主义和本国资产阶级压迫，具有很强革命性。</p></li></ol></li><li><p><strong>中国共产党成立历史意义</strong>：</p><ol><li>是中华民族发展史上一个开天劈的大事变，具有伟大深远的意义。</li><li>形成了坚持真理、坚守理想，践行初心、但当使命，不怕牺牲、英勇斗争，对党忠诚、不负人民的伟大建党精神。</li></ol></li></ul><hr><h2 id="第三节-中国革命新局面-p109">第三节 中国革命新局面 (p109)</h2><h3 id="1-民主革命纲领的制定和工农运动的发动">1. 民主革命纲领的制定和工农运动的发动</h3><hr><ul><li><strong>中国工人运动第一个高潮</strong>：1922年1月香港海员罢工—1923年2月京汉铁路工人罢工。</li><li><strong>中国第一个农民协会</strong>：1921年9月浙江萧山县衙前村成立。</li></ul><blockquote><p><strong>1922年6月澎湃在广东海丰县赤山约成立了农会。</strong></p></blockquote><hr><h1>第五章 中国革命新道路</h1><h2 id="第一节-中国共产党对革命新道路的探索-p120">第一节 中国共产党对革命新道路的探索 (p120)</h2><h3 id="2-土地战争革命的兴起">2. 土地战争革命的兴起</h3><hr><ul><li><p><strong>在危急关头中共中央决定的三件大事</strong>：</p><ol><li>将党掌握和影响的部队向南昌集中，准备起义。</li><li>组织农民发动秋收起义。</li><li>召集紧急会议，讨论决定大革命失败后的方针。</li></ol></li><li><p><strong>七八会议</strong>：七八会议是党在革命危急关头紧急召开的一次会议，确立了土地革命和和武装起义的正确方针，这次会议中毛泽东同志提出:注意军事，政权是枪杆子中取得的。等重要结论。给正在处于思想混乱和组织涣散的中国共产党指明了道路，是由大革命失败到土地革命战争的历史性转变的一次会议。</p></li><li><p><strong>南昌起义</strong>：打响了武装反抗国民党反动派第一枪，是中国共产党独立领导革命战争、创建人民军队和武装夺取政权的开端。</p></li><li><p><strong>三湾改编</strong>：标志着从组织上确立了党对军队的领导。是建设无产阶级领导的新型人民军队的重要开端。</p></li></ul><h3 id="3-农村包围城市、武装夺取政权道路的开辟">3. 农村包围城市、武装夺取政权道路的开辟</h3><hr><ul><li><strong>中国共产党第六次全国代表大会内容</strong>：继续把城市复兴工作视为革命高潮到来，肯定农村根据地和红军是决定革命新高潮的更大发展基础和重要力量，确定争取群众作为党的首要任务，把”左“倾作为主要危险来反对，这是党的工作方针的一次重要转变。</li><li><strong>古田会议内容</strong>：确立了思想建党，政治建军，以马克思主义建党建军原则，创造性解决了在农村环境中、在党组织和军队以农民为主要成分条件下，如何保持党的无产阶级先锋队性质和建设党领导的新型人民军队的重大问题。是党和人民军队建设史上一个重要里程碑。</li></ul><blockquote><p><strong>游击战成为中国革命的主要形式，农村根据地成为积蓄锻炼革命力量的主要战略阵地。</strong></p></blockquote><ul><li><strong>中国革命能坚持和发展根本原因</strong>：中国共产党能紧紧依靠农民，领导农民进行土地制度革命。</li></ul><hr><h2 id="第二节-中国革命在曲折中前进-p129">第二节 中国革命在曲折中前进 (p129)</h2><h3 id="2-遵义会议实现伟大历史转折">2. 遵义会议实现伟大历史转折</h3><hr><ul><li><strong>遵义会议</strong>：是党的历史上一个生死攸关的转折点。确立了毛泽东在党中央和红军的领导地位，开始确立以毛泽东为主要代表的马克思主义正确路线在党中央的领导地位，开始形成以毛泽东为核心的第一代中央领导集体，在最危急的关头挽救了党，挽救了红军挽救了中国革命。</li></ul><h3 id="3-红军长征胜利和迎接全民族抗战">3. 红军长征胜利和迎接全民族抗战</h3><hr><ul><li><strong>长征胜利的意义</strong>：<ol><li>极大的促进了党在政治上和思想上的成熟。</li><li>是中国革命转危为安的关键。</li><li>宣告了国民党反动派围剿中国共产党和红军图谋的彻底失败，实现了中国共产党和中国革命事业从挫折走向胜利的伟大转折。</li><li>铸就了伟大的长征精神。</li><li>中国革命的新局面的开始。</li></ol></li></ul><hr><h1>第六章 中华民族的抗日战争</h1><h2 id="第一节-日本发动企图灭亡中国的侵略战争-p138">第一节 日本发动企图灭亡中国的侵略战争 (p138)</h2><h3 id="1-日本灭亡中国的计划及其实施">1. 日本灭亡中国的计划及其实施</h3><hr><ul><li><p><strong>九一八事变</strong>：1931年9月18日，日本自己炸毁沈阳北部柳条湖附近一段路轨，反诬中国军队所为，炮轰东北军北大营，向沈阳等地发起进攻。</p></li><li><p><strong>七七事变（卢沟桥事变）</strong>：1937年7月7日，日军在卢沟桥北部进行军事演习，借口一名士兵失踪，要救进宛平城搜查被拒后开展炮轰，随后向中国驻军进攻，日军全面侵华战争就此开始。</p></li><li><p><strong>华北事变</strong>：1936年日本在华北制造一系列事端，中国丧失了河北、察哈尔两省主权。日本还在华北五省策动“防共自治运动”，制造傀儡政</p></li></ul><hr><h2 id="第二节-中国人民奋起抗击日本侵略者-p141">第二节 中国人民奋起抗击日本侵略者 (p141)</h2><h3 id="3-抗日民族统一战线的建立与全民族抗战的开始">3. 抗日民族统一战线的建立与全民族抗战的开始</h3><hr><ul><li><strong>一二·九运动</strong>：促进了中华民族觉醒，标志着中国人民抗日救亡图存运动新高潮到来。</li><li><strong>瓦窑堡会议</strong>：提出党的基本策略任务是建立广泛的抗日民族统一战线。</li><li><strong>西安事变</strong>：张学良，杨虎城向蒋介石要求抗日遭拒后发动兵谏，扣留蒋介石，通电全国，提出停止内战，一致抗日等八项主张。</li></ul><blockquote><p><strong>八路军总指挥为 朱德,副总指挥为 彭德怀 新四军军长为 叶挺 副军长为 项英</strong></p></blockquote><hr><h2 id="第四节-抗日战争的中流砥柱-p148">第四节 抗日战争的中流砥柱 (p148)</h2><h3 id="1-全面抗战路线和持久战的战略总方针">1. 全面抗战路线和持久战的战略总方针</h3><hr><blockquote><p><strong>中国共产党实行全面抗战路线 即 人民战争路线.</strong></p></blockquote><ul><li><strong>《论持久战》</strong>： 系统阐述了抗日战争发展规律和坚持抗战、争取抗战胜利必须实行的战略总方针，是中国共产党领导抗日战争的纲领性文献，对全国抗战产生了积极影响。</li></ul><hr><h3 id="3-坚持抗战、团结、进步的方针">3. 坚持抗战、团结、进步的方针</h3><hr><blockquote><p><strong>抗日民族统一战线是以公共合作为基础。</strong></p></blockquote><blockquote><p>1937年中国共产党提出：坚持抗战到底——反对中途妥协巩固国内团结——反对内部分裂力求全国进步——反对向后倒退</p></blockquote><hr><h3 id="6-中国共产党自身建设">6. 中国共产党自身建设</h3><hr><ul><li><strong>六届六中全会</strong>：毛泽东提出“马克思主义中国化”纠正了王明的右倾错误，进一步巩固了毛泽东在全党的领导地位，统一了全党的思想和步调，推进了各项工作发展。</li><li><strong>中国革命战胜敌人三大法宝</strong>：统一战线武装斗争党的建设</li><li><strong>整风运动内容</strong>：反对主观主义、宗派主义、党八股以及树立马克思主义的作风</li><li><strong>整风运动意义</strong>：是一次深刻的马克思主义思想教育活动，也是一场思想解放运动。坚持马克思主义与中国实际情况相结合，使全党范围内确立实事求是的思想。</li><li><strong>中共七大内容</strong>：指定新民主主义国家在政治、经济、文化方面的纲领，提出实现中国工业化的宏伟任务。把毛泽东思想确立为党的指导思想写入党章。</li></ul><hr><h1>第七章 为建立新中国而奋斗</h1><h2 id="第一节-从争取和平民主到击退国民党的军事进攻（p168）">第一节 从争取和平民主到击退国民党的军事进攻（p168）</h2><h3 id="1-中国共产党争取和平民主的斗争">1. 中国共产党争取和平民主的斗争</h3><hr><ul><li><strong>重庆谈判</strong>：为争取民主和平，毛泽东、周恩来、王若飞去重庆与国民党当局谈判，体现了共产党谋求和平的愿望。</li><li><strong>双十协定</strong>：确认和平建国的基本方针，同意“长期合作，坚决避免内战“</li><li><strong>政协会议协议（非新民主主义性质）</strong>：有利于冲破蒋介石的独裁统治和实行民主政治，有利于和平建国，一定程度上有利于人民。</li></ul><hr><h2 id="第二节-全国解放战争的发展和第二条战线的形成-p173">第二节 全国解放战争的发展和第二条战线的形成 (p173)</h2><h3 id="1-解放战争的胜利发展">1.解放战争的胜利发展</h3><hr><ul><li><strong>挺进大别山</strong>：1947年6月低刘伯承，邓小平率领军队挺进大别山。标志着人民解放放战争战略进攻开始。</li></ul><hr><h1>第八章 中华人民共和国的成立与中国社会主义建设道路探索</h1><h2 id="第一节-中华人民共和国的成立和新生人民政府政权的巩固（p194）">第一节 中华人民共和国的成立和新生人民政府政权的巩固（p194）</h2><h3 id="1-中国人民站起来了">1. 中国人民站起来了</h3><hr><ul><li><strong>中华人民共和国成立的意义</strong>：是具有世界意义的大胜利，是马克思列宁主义在中国的胜利，是马克思列宁主义基本原理同中国具体实践相结合的思想——毛泽东思想的胜利。使马克思列宁主义和毛泽东思想在中国人民心中获得很高威望，并指导中国各行各业，在世界范围内扩大影响。</li></ul><hr><h3 id="2-捍卫巩固新政权的斗争">2. 捍卫巩固新政权的斗争</h3><hr><ul><li><strong>新中国成立初期面临的考验</strong>：<ol><li>能不能保卫住革命胜利的成果，巩固新生人民政权。</li><li>能不能战胜严重经济困难，迅速恢复和发展国民经济。</li><li>能不能巩固民族独立，维护国家主权和安全。</li><li>能不能经受住全国执政的考验，继续保持优良传统。</li></ol></li></ul><hr><h2 id="第三节-初步确立社会主义基本制度（p211）">第三节 初步确立社会主义基本制度（p211）</h2><h3 id="1-建立社会主义经济制度">1. 建立社会主义经济制度</h3><hr><ul><li><strong>社会主义经济制度</strong>：以生产资料公有制、按劳分配和计划经济体制为特征的社会主义经济制度建立起来。</li></ul><hr><h2 id="第四节-全面建设社会主义的良好开端（p216）">第四节 全面建设社会主义的良好开端（p216）</h2><h3 id="2-开始全面建设社会主义">2. 开始全面建设社会主义</h3><hr><ul><li><strong>中共八大</strong>：正确分析了国内形势和主要矛盾变化，明确新形势下党和人民的主要任务。<ul><li>主要矛盾：人民对于经济文化迅速发展的需要同当前经济文化不能满足人民需要的状况之间的矛盾。</li><li>全国人民的主要任务：集中力量发展社会生产力，实现国家工业化，逐步满足人民日益增长的物质文化需要。</li></ul></li></ul><h1>第九章-第十章</h1><ul><li>党的十一届三中全会胜利召开，标志着新中国进入改革开放和社会主义现代化建设历史新时期。</li><li>1981年6月，十一届六中全会，通过了建国以来党的若干问题决议。</li><li>1987年10月，提出在社会主义初级阶段基本路线：一个中心两个基本点。</li><li>党的十九大确立了习近平新时代中国特色社会主义思想的历史地位。</li><li>党的十九大报告明确指出，中国特色社会主义进入新时代，我国社会主要矛盾已经转化为人民日益增长的美好生活需要与不平衡不充分的发展之间的矛盾。</li><li>2013年3月，习近平首次提出构建人类命运共同体理念。</li></ul><h1>修改内容：</h1><p><strong>南京临时政府</strong>：是一个及产阶级共和国性质的革命政权，是以资产阶级革命派占据主导地位，同盟会成员占据多数，集中代表和反映了中国资产阶级和民族资产阶级的愿望和利益，一定程度上符合广大人民群众利益的政权。</p><p><strong>公车上书</strong>：19世纪90年代后新兴民族资产阶级迫切需求挣脱外国资本主义和国内封建势力的压迫和束缚。以日本学习西方崛起成功为模板，想以学习西方来自强。以康有为、梁启超为代表的资产阶级维新派为了让皇帝推行变法，拯救国家而联合1300多名举人共同向皇帝上书，是戊戌变法的开端。</p><p><strong>中国共产党成立历史意义</strong>：</p><ol><li>使中国革命有了坚强党的领导核心，中国人民有了可以依赖的领导者和组织者，由民主革命向社会革命转变。</li><li>使中国有了科学的指导思想，以马克思主义为指导思想，与中国具体实践相结合，为中国人民斗争指明了方向。</li><li>是中华民族发展史上一个开天劈的大事变，具有伟大深远的意义。</li><li>形成了坚持真理、坚守理想，践行初心、但当使命，不怕牺牲、英勇斗争，对党忠诚、不负人民的伟大建党精神。</li></ol><p><strong>南昌起义</strong>：1927年8月1日在周恩来率领掌握和影响的2w人在南昌打响了武装反抗国民党反动派第一枪，是中国共产党独立领导革命战争、创建人民军队和武装夺取政权的开端。</p><p><strong>秋收起义</strong>：以毛泽东为领导核心，打出以“工农革命军”的旗帜的起义运动，在攻打长沙等城市受挫后将重心转向农村。</p><p><strong>广州起义</strong>：1911年4月，黄兴率领敢死队120余人在广州起义，大部在激战中牺牲，72位烈士遗骸被埋葬于黄花岗，也称“黄花岗起义”。</p><p><strong>古田会议</strong>：1929年12月，古田会议在福建上杭县古田村召开。确立了思想建党，政治建军，以马克思主义建党建军原则，创造性解决了在农村环境中、在党组织和军队以农民为主要成分条件下，如何保持党的无产阶级先锋队性质和建设党领导的新型人民军队的重大问题。是党和人民军队建设史上一个重要里程碑。</p><p><strong>遵义会议</strong>：1935年1月在遵义召开，会议集中解决了当时具有决定意义的军事和组织问题。是党的历史上一个生死攸关的转折点。确立了毛泽东在党中央和红军的领导地位，开始确立以毛泽东为主要代表的马克思主义正确路线在党中央的领导地位，开始形成以毛泽东为核心的第一代中央领导集体，在最危急的关头挽救了党，挽救了红军挽救了中国革命。</p><p><strong>九一八事变</strong>：1931年9月18日，日本自己炸毁沈阳北部柳条湖附近一段路轨，反诬中国军队所为，炮轰东北军北大营，向沈阳等地发起进攻。是日本企图将中国变为独占殖民地的侵略战争的开始。至1932年2月中国东北全境沦陷。</p><p><strong>华北事变</strong>：1936年日本在华北制造一系列事端，中国丧失了河北、察哈尔两省主权。日本还在华北五省策动“防共自治运动”，制造傀儡政，以此控制中国东北。</p><p><strong>一二·九运动</strong>：在华北事变后，民族矛盾进一步激化，1935年12月9日，北平学生举行声势浩大的抗日游行，随后北平学生和市民1w多人召开市民大会，举行更大规模示威游行，随后波及全国。促进了中华民族觉醒，标志着中国人民抗日救亡图存运动新高潮到来。</p><p><strong>西安事变</strong>：1936年12月初，蒋介石到达西安，逼张学良、杨虎城“剿共”。张学良，杨虎城向蒋介石要求抗日遭拒后发动兵谏，扣留蒋介石，通电全国，提出停止内战，一致抗日等八项主张。</p><p><strong>《论持久战》（毛泽东）</strong>： 系统阐述了抗日战争发展规律和坚持抗战、争取抗战胜利必须实行的战略总方针，是中国共产党领导抗日战争的纲领性文献，对全国抗战产生了积极影响。</p><p><strong>中共七大</strong>：1945年4月，在延安召开。会议指定新民主主义国家在政治、经济、文化方面的纲领，提出实现中国工业化的宏伟任务。把毛泽东思想确立为党的指导思想写入党章。</p><p><strong>重庆谈判</strong>：1945年8月28日为争取民主和平，毛泽东、周恩来、王若飞去重庆与国民党当局谈判，体现了共产党谋求和平的愿望。中国</p><p><strong>政协会议协议（非新民主主义性质）</strong>：1946年10月1日在重庆举办，会议达成政府组织案、国民大会案、和平建国纲领、军事问题案、宪法草案五项协定。有利于冲破蒋介石的独裁统治和实行民主政治，有利于和平建国，一定程度上有利于人民。</p><p><strong>中华人民共和国成立的意义</strong>：是具有世界意义的大胜利，是马克思列宁主义在中国的胜利，是马克思列宁主义基本原理同中国具体实践相结合的思想——毛泽东思想的胜利。这个胜利，使马克思列宁主义、毛泽东思想在中国人民心中获得很高威望，被接受为人民共和国各项事业的指导思想，在世界范围内扩大影响。</p><ul><li><p><strong>中共八大</strong>：1956年9月在北京举行。会议正确分析了国内形势和主要矛盾变化，明确新形势下党和人民的主要任务。</p><ul><li><p>主要矛盾：人民对于经济文化迅速发展的需要同当前经济文化不能满足人民需要的状况之间的矛盾。（由经济发展短缺不能弥补上人民的需求的增长，社会生产力较为低下）</p></li><li><p>全国人民的主要任务：集中力量发展社会生产力，实现国家工业化，逐步满足人民日益增长的物质文化需要。</p></li></ul></li></ul><p><strong>《关于正确处理人民内部矛盾》(毛泽东)</strong>：毛泽东深入研究社会主义社会的矛盾问题，形成一套系统的关于社会主义社会矛盾的学说，丰富和发展了科学社会主义理论，对党和社会主义建设事业具有长远指导意义。</p><ul><li><strong>近代中国两大历史任务</strong>：<ul><li>民族独立和人民解放</li><li>国家富强繁荣和人民共同富裕</li></ul></li></ul><p><strong>中国人民反抗具有历史意义</strong>：帝国主义瓜分中国图谋的破产、民族意识的觉醒</p><p>土地革命革命意义</p><p>重庆谈判意义</p><p>统一战线 一大与二大区别：     一大：摒弃一切资产阶级  二大：打倒列强</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;第一章 进入近代后中华民族的磨难与抗争&lt;/h1&gt;
&lt;h2 id=&quot;第一节-鸦片战争前后的中国与世界（p13）&quot;&gt;第一节  鸦片战争前后的中国与世界（p13）&lt;/h2&gt;
&lt;h3 id=&quot;1-鸦片战争的爆发&quot;&gt;1. 鸦片战争的爆发&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面向对象（二）</title>
    <link href="https://www.fomal.cc/posts/b51db9d.html"/>
    <id>https://www.fomal.cc/posts/b51db9d.html</id>
    <published>2023-12-22T07:08:02.252Z</published>
    <updated>2023-12-22T12:27:27.044Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1. 封装</h1><blockquote><p>封装就是将现实世界中的属性行为转化为程序中的类的成员变量和成员方法的过程称之为封装。封装不代表所有的属性和行为都会开放给用户，即私有的成员变量和行为。</p></blockquote><ul><li>私有成员变量和方法：私有方法无法直接被类调用，私有成员无法赋值和取值</li></ul><p>私有成员和私有变量的构建方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">名称</span>：</span><br><span class="line">__成员变量名</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__方法名</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><strong>私有成员变量进行调用赋值时不会报错，但是操作无效</strong></li><li><strong>私有方法的调用会报错</strong></li><li><strong>私有成员可以由内部去使用</strong></li></ol><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">STU</span>:</span><br><span class="line">    __age=<span class="number">20</span></span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__printms</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;学生信息&quot;</span>)</span><br><span class="line">        </span><br><span class="line">stu=STU(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">stu.__age=<span class="number">18</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">stu.__printms()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231222152054055.png" alt="image-20231222152054055"></p><blockquote><p>私有成员的使用：</p><p>私有成员在类中时可以由其他公开成员方法去调用从而使用</p></blockquote><p>例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">STU</span>:</span><br><span class="line">    __age=<span class="number">20</span></span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printms</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__age &gt;=<span class="number">18</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;学生成年&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;学生未成年&quot;</span>)</span><br><span class="line">        </span><br><span class="line">stu=STU(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">stu.printms()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231222152652001.png" alt="image-20231222152652001"></p><p><strong>所以私有成员仅供内部成员方法使用。</strong></p><hr><h1>2. 继承</h1><blockquote><p>继承就是将将已有的功能调用继续使用，而被调用的部分为父类，调用的类成为子类。</p></blockquote><p>基础语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类1</span>：</span><br><span class="line">成员变量</span><br><span class="line">    </span><br><span class="line">    成员方法</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类2</span>(<span class="title class_ inherited__">类1</span>)：</span><br><span class="line">成员变量</span><br><span class="line">    </span><br><span class="line">    成员方法</span><br></pre></td></tr></table></figure><blockquote><p><strong>在上述格式中，类1称为父类，类2称为子类，继承分类单继承和多继承即继承一个类或者继承多个类，如果子类对杜雷的某一变量需要更改则可以直接进行赋值，称之为复写</strong></p></blockquote><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">engine</span>:</span><br><span class="line">    n=<span class="number">4</span></span><br><span class="line">    <span class="built_in">id</span>=<span class="number">1105</span></span><br><span class="line">    <span class="built_in">type</span>=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">engine2</span>(<span class="title class_ inherited__">engine</span>):</span><br><span class="line">    <span class="built_in">type</span>=<span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">carbox</span>:</span><br><span class="line">    length=<span class="string">&quot;长车型&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>(carbox,engine):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printms</span>(<span class="params">self</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;汽车发动机缸数为<span class="subst">&#123;self.n&#125;</span>,型号为<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span>,车身长短为<span class="subst">&#123;self.length&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">car=Car()</span><br><span class="line">car.printms()</span><br></pre></td></tr></table></figure><blockquote><p>以上engine2为单继承，继承了engine的内容,在engine2中type复写了2剩下的属性则可以继续使用。而Car则是使用了多继承将engine和carbox的内容整合输出。</p></blockquote><p>输出结果为：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231222154402455.png" alt="image-20231222154402455"></p><blockquote><p>而在继承中如果出现多继承时有相同成员变量存在则会满足就近原则。即调用最靠左的父类名称中的变量</p></blockquote><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">massage1</span>:</span><br><span class="line">    ms=<span class="number">123456</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">massage2</span>:</span><br><span class="line">    ms=<span class="number">654321</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ms</span>(massage1,massage2):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.ms)</span><br><span class="line">        </span><br><span class="line">MS=ms()</span><br><span class="line">MS.printf()</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231222154822273.png" alt="image-20231222154822273"></p><blockquote><p>所以输出了massage1中的内容，那么我们也可以直接选择性调用自己所需要的父类成员。</p></blockquote><blockquote><p>父类成员我们也可以选择直接调用</p></blockquote><p>基础格式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">super().成员变量</span><br><span class="line">super().成员方法()</span><br><span class="line"></span><br><span class="line">父类名.成员变量</span><br><span class="line">父类名.成员方法(self)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><strong>在这里用super（）在调用方法时不需要加self，但是重名时仍然会遵循就近原则</strong></li><li><strong>直接使用父类名在方法使用上需要加self</strong></li><li><strong>直接调用时会直接忽略子类的复写</strong></li></ol><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">massage1</span>:</span><br><span class="line">    ms=<span class="number">123456</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">massage2</span>:</span><br><span class="line">    ms=<span class="number">654321</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ms1</span>(massage1,massage2):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(massage2.ms)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ms2</span>(<span class="title class_ inherited__">massage1</span>):</span><br><span class="line">    ms=<span class="number">123</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">super</span>().ms)</span><br><span class="line">        </span><br><span class="line">MS1=ms1()</span><br><span class="line">MS1.printf()</span><br><span class="line">MS2=ms2()</span><br><span class="line">MS2.printf()</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231222155707784.png" alt="image-20231222155707784"></p><hr><h1>3. 多态</h1><blockquote><p>多态即为多种状态，在使用不同对象时会得到不同状态。<strong>父类作为定义声明，子类作为实际对象工作。</strong></p></blockquote><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">system</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">windows</span>(<span class="title class_ inherited__">system</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;windows系统&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mac</span>(<span class="title class_ inherited__">system</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printf</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;苹果系统&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printfs</span>(<span class="params">system:system</span>):</span><br><span class="line">    system.printf()</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">win=windows()</span><br><span class="line">m=mac()</span><br><span class="line"></span><br><span class="line">printfs(win)</span><br><span class="line">printfs(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在上述程序中子类继承父类格式，创建不同的类执行不同的代码，实现多态。</p><p>这里的父类是使用空方法，叫做抽象类（也叫接口）通常配合多态使用。</p></blockquote><ul><li><p>抽象类：含有抽象方法的类</p></li><li><p>抽象方法：方法体为空实现（pass）</p></li></ul><p>含义：</p><ol><li>父类来确定方法有哪些（预定设计模板）</li><li>具体实现方法由子类自行决定。</li></ol><p><strong>优点：可以提前制定一个指标用来为子类确定设计标准</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1. 封装&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;封装就是将现实世界中的属性行为转化为程序中的类的成员变量和成员方法的过程称之为封装。封装不代表所有的属性和行为都会开放给用户，即私有的成员变量和行为。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;私</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面向对象(1)</title>
    <link href="https://www.fomal.cc/posts/8dd4ca8d.html"/>
    <id>https://www.fomal.cc/posts/8dd4ca8d.html</id>
    <published>2023-12-14T15:59:44.735Z</published>
    <updated>2023-12-15T11:11:46.454Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1. 类和对象的定义使用</h1><ul><li><p>类的概述：在py中我们使用==class==来设计一个类，而类就类似于设定一个模板或者表格，以便后面可以批量使用同一个模板。而==类可以封装属性==。</p></li><li><p>类的属性：即定义在类中的变量，也叫==成员表变量==。（数据）</p></li><li><p>类的行为：即定义在类中的函数，也叫==成员方法==。（函数）</p></li></ul><p>创建类的基本格式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类的名称</span>：（<span class="keyword">class</span>就是类的标志）</span><br><span class="line">类的属性</span><br><span class="line">    类的行为</span><br></pre></td></tr></table></figure><p>对象可以理解为具体一个物体，当我们使用类构建出对象时，相当于去让一个变量去使用模板。进行编程</p><p>创建类对象的基本方式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象=类()</span><br></pre></td></tr></table></figure><p>即调用类的模板准备使用</p><p>类方法定义：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">方法名</span>(<span class="params">self,形参<span class="number">1</span>，形参<span class="number">2</span>,...</span>):</span><br><span class="line">方法体</span><br></pre></td></tr></table></figure><p>==注意：在上述类方法定义中，与函数最明显的区别在于，他有一个self，这个self必须填写==</p><p><strong>self:</strong></p><ol><li><strong>用来表示类对象自身的意思</strong></li><li><strong>要使用类对象调用时，self会自动被py传入</strong></li><li><strong>在方法内部，想要访问成员变量，必须使用self</strong></li><li><strong>在传参时，self可以被忽略，不用理会</strong></li></ol><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="comment">#类的属性</span></span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    grade=<span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#类的行为</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">putin</span>(<span class="params">self,Name,Age,Grade</span>):</span><br><span class="line">        self.name=Name</span><br><span class="line">        self.age=Age</span><br><span class="line">        self.grade=Grade</span><br><span class="line"><span class="comment">#创建使用对象</span></span><br><span class="line">stu=Student()</span><br><span class="line">stu.putin(Name=<span class="string">&quot;张三&quot;</span>，Age=<span class="number">18</span>,Grade=<span class="number">600</span>)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><hr><h1>2. 构造方式和魔术方式（统称为内置方法）</h1><h2 id="2-1-init方法">2.1 init方法</h2><blockquote><p><strong>init方法可以在对象创建时自动执行，并且将传入的参数传递给init使用</strong></p></blockquote><p>基本语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">    类的属性</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,参数<span class="number">1</span>,参数<span class="number">2</span>,...</span>):</span><br><span class="line">        self.属性<span class="number">1</span>=参数<span class="number">1</span></span><br><span class="line">        self.属性<span class="number">2</span>=参数<span class="number">2</span></span><br><span class="line">        .......</span><br><span class="line">        </span><br><span class="line">x=类(参数<span class="number">1</span>,参数<span class="number">2</span>,....)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在上述语法中。我们在构建对象时直接将需要写入的数据写在括号中，此时就可以将值自动放进类的属性中，便于进行操作</p></blockquote><p>==注意：在使用init方法中，我们可以省略属性部分，因为在init方法中，也可以相当于创建了属性中的变量，所以，一但init中引用到的属性，都可以不用在属性中单独定义。==</p><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="comment">#在init中写了后此处可以不写</span></span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    tender=<span class="literal">None</span></span><br><span class="line">    grade=<span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#会自动调用可以直接传参</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,tender,grade</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.tender=tender</span><br><span class="line">        self.age=age</span><br><span class="line">        self.grade=grade</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对象数据已重置。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#打印数据行为</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_information</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name,self.grade,self.age,self.tender)</span><br><span class="line"></span><br><span class="line">stu=Student(<span class="string">&quot;chen&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;667&quot;</span>)</span><br><span class="line">stu.print_information()</span><br></pre></td></tr></table></figure><blockquote><p>上述示例中，我们使用类的行为直接打印出类的属性，免去了不必要的冗杂的代码。使代码更加简洁。</p></blockquote><p>==注意：在类的构建方法中前后的两个下划线不可省略。并且在构建中也需要参数self==</p><h2 id="2-2魔术方法（lt-le-eq-str）">2.2魔术方法（lt le eq str）</h2><blockquote><p>当我们需要对对象中的<strong>数据进行大小比较时无法直接通过对象</strong>进行比较，而魔术方法可以实现这种功能。并且也可以直接通过对象调用输出想要参数。魔术方法有很多，并不仅仅局限于以下介绍的四种。</p></blockquote><h3 id="2-2-1-比较的魔术方法">2.2.1 比较的魔术方法</h3><p>首先 lt le eq 三种方法是用来比较大小使用的，区别在于：</p><ol><li>lt仅仅用于大于和小于比较</li><li>le仅仅用于小于等于和大于等于比较</li><li>eq仅仅用于等于比较</li></ol><blockquote><p>==注意：三者是互相独立的，不能混淆，即使用的lt方法中是无法使用等于比较和大于等于以及小于等于。其他的方法同理，一个方法只能负责其支持的单独的功能。<strong>返回值为布尔类型</strong>==</p></blockquote><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,price</span>):</span><br><span class="line">        self.<span class="built_in">id</span>=<span class="built_in">id</span></span><br><span class="line">        self.price=price</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#lt只能小于或者大于，没有等于（le有大于等于和小于等于比较，eq判断等于）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.price&lt;other.price</span><br><span class="line"></span><br><span class="line">car1=Car(<span class="string">&quot;鄂A8888&quot;</span>,<span class="number">20</span>)</span><br><span class="line">car2=Car(<span class="string">&quot;鄂A9999&quot;</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(car2&gt;car1)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231215163450897.png" alt="image-20231215163450897"></p><blockquote><p>比较成功，如果想用&gt;=则需要le，==需要eq</p></blockquote><p>其次探讨str</p><blockquote><p>str是string缩写，目的是让对象可以直接以字符串形式输出</p></blockquote><p>示例（未使用str）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,price</span>):</span><br><span class="line">        self.<span class="built_in">id</span>=<span class="built_in">id</span></span><br><span class="line">        self.price=price</span><br><span class="line"></span><br><span class="line">car=Car(<span class="string">&quot;鄂A8888&quot;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(car.<span class="built_in">id</span>,car.price)</span><br><span class="line"><span class="built_in">print</span>(car)</span><br></pre></td></tr></table></figure><p>结果:</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231215164305282.png" alt="image-20231215164305282"></p><blockquote><p>其中我们打印内容需要去追溯其中的具体属性。==如果没有str那么返回的是对象的内存地址==。</p></blockquote><p>使用str示例:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">id</span>,price</span>):</span><br><span class="line">        self.<span class="built_in">id</span>=<span class="built_in">id</span></span><br><span class="line">        self.price=price</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;车牌为:<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span>,价格为:<span class="subst">&#123;self.price&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">car=Car(<span class="string">&quot;鄂A8888&quot;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(car)</span><br></pre></td></tr></table></figure><p>运行结果为:</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231215165216665.png" alt="image-20231215165216665"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1. 类和对象的定义使用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类的概述：在py中我们使用==class==来设计一个类，而类就类似于设定一个模板或者表格，以便后面可以批量使用同一个模板。而==类可以封装属性==。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类的属性：即</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>py的数据容器</title>
    <link href="https://www.fomal.cc/posts/46006cb5.html"/>
    <id>https://www.fomal.cc/posts/46006cb5.html</id>
    <published>2023-12-07T08:28:41.933Z</published>
    <updated>2023-12-08T10:54:23.263Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1. 概述</h1><blockquote><p>数据容器的目的是运用少量的彬良存储大量数据，如一个name变量存储多个名字。使变量的运用更加高效。</p><p>数据容器的的概念是：一种额可以容纳多份数据的数据的数据类型，容纳的每份数据称之为一个元素，每一个元素可以说任意 类型的数据类型，如字符串，数字，布尔等。</p></blockquote><p>容器有五类：</p><ol><li>列表（list）</li><li>元组（tuple）</li><li>字符串（str）</li><li>集合（set）</li><li>字典（dirt）</li></ol><p>根据如下特点划分：</p><ul><li>是否支持相同元素</li><li>是否可以修改</li><li>是否有序</li></ul><hr><h1>2. 列表（list）</h1><h2 id="2-1-列表基本定义">2.1 列表基本定义</h2><p>基本语法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">变量名称=[元素<span class="number">1</span>，元素<span class="number">2</span>，...]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义空列表</span></span><br><span class="line">变量名=[]</span><br><span class="line">变量名=<span class="built_in">list</span>()</span><br></pre></td></tr></table></figure><ul><li><strong>列表的标志为[]</strong></li><li><strong>列表的每一个元素用逗号隔开</strong></li><li><strong>空列表的定义中list定义时用小括号而非中括号</strong></li></ul><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list=[<span class="string">&quot;吃喝不愁&quot;</span>，<span class="number">987</span>，<span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(my_list))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231207160851648.png" alt="image-20231207160851648"></p><p>类型为list（列表）类型</p><p>列表的元素不仅可以用来存储常规数据，也可以存储另一个列表，即列表的嵌套。</p><p>格式如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表名称=[列表<span class="number">1</span>,列表<span class="number">2</span>,列表<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">my_list1=[[<span class="number">112</span>,<span class="number">3423</span>,<span class="number">54</span>],[<span class="string">&quot;akfjh&quot;</span>,<span class="string">&quot;sdkaj&quot;</span>,<span class="string">&quot;aksjd&quot;</span>]]</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">list1=[<span class="number">123</span>,<span class="number">543</span>,<span class="number">12</span>]</span><br><span class="line">list2=[<span class="string">&quot;aksud&quot;</span>,<span class="string">&quot;iasjudh&quot;</span>,<span class="string">&quot;skajd&quot;</span>]</span><br><span class="line">my_list2=[list1,list2]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(my_list1)</span><br><span class="line">    <span class="built_in">print</span>(my_list2)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(my_list1),<span class="built_in">type</span>(my_list2))</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231207161656361.png" alt="image-20231207161656361"></p><hr><h2 id="2-2-常用操作">2.2 常用操作</h2><p>列表的取出可以使用下标索引</p><p>基本语法为：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表名称[元素下标]</span><br></pre></td></tr></table></figure><ul><li><strong>在这里元素下标第一个从0开始，依次往后推，如果从后往前从-1开始</strong></li><li><strong>如果是嵌套列表则用两个[]</strong></li></ul><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">my_list1=[<span class="string">&quot;吃喝不愁&quot;</span>，<span class="number">987</span>，<span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;第一个元素为<span class="subst">&#123;my_list1[<span class="number">0</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;第一个元素倒序为<span class="subst">&#123;my_list1[-<span class="number">3</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">list1=[<span class="number">123</span>,<span class="number">543</span>,<span class="number">12</span>]</span><br><span class="line">list2=[<span class="string">&quot;aksud&quot;</span>,<span class="string">&quot;iasjudh&quot;</span>,<span class="string">&quot;skajd&quot;</span>]</span><br><span class="line">my_list2=[list1,list2]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;第一个子列表的第二个元素为<span class="subst">&#123;my_list2[<span class="number">0</span>][<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>基本操作如下表</p><table><thead><tr><th style="text-align:center">使用方式</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">名称.append(元素)</td><td style="text-align:center">向列表中添加一个元素</td></tr><tr><td style="text-align:center">名称.extend(容器)</td><td style="text-align:center">将目标容器的元素取出追加到列表的末尾</td></tr><tr><td style="text-align:center">名称.insert(下标,元素)</td><td style="text-align:center">在指定下标处插入指定元素，原指定下标元素及其以后的元素编号+1</td></tr><tr><td style="text-align:center">del 名称[下标]</td><td style="text-align:center">删除列表指定下标元素</td></tr><tr><td style="text-align:center">名称.pop(下标)</td><td style="text-align:center">删除下标指定元素并且返回</td></tr><tr><td style="text-align:center">名称.remove(元素)</td><td style="text-align:center">从前向后删除第一个与之匹配的元素</td></tr><tr><td style="text-align:center">名称.clear()</td><td style="text-align:center">清空此列表</td></tr><tr><td style="text-align:center">名称.count(元素)</td><td style="text-align:center">统计这个元素在列表中出现次数</td></tr><tr><td style="text-align:center">名称.index()</td><td style="text-align:center">查找指定元素下标位置，如果没有就报错ValueError</td></tr><tr><td style="text-align:center">len（名称）</td><td style="text-align:center">统计列表内有多少元素</td></tr></tbody></table><hr><h1>3. 元组（tuple）</h1><h2 id="3-1-元组基本定义">3.1 元组基本定义</h2><blockquote><p>元组与列表区别在于不可修改。定义后只读。</p><p>当我们封装的数据不想让其被修改则用元组</p></blockquote><p>基本语法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">(元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,....)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">变量名称=(元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>,....)</span><br><span class="line"><span class="comment">#定义空元组</span></span><br><span class="line">变量名称=()</span><br><span class="line">变量名称=<span class="built_in">tuple</span>()</span><br></pre></td></tr></table></figure><ul><li><p><strong>元组在定义上与列表是括号的不同，元组也支持不同数据类型混搭</strong></p></li><li><p><strong>空元组两种方式均用小括号</strong></p></li></ul><p>元组不可以修改，但是如果元组中包含列表，则列表对应内容可以修改</p><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">my_tuple=(<span class="number">123</span>,<span class="number">453</span>,[<span class="number">123</span>,<span class="number">432</span>])</span><br><span class="line"><span class="keyword">del</span> my_tuple[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(my_tuple)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">43</span>,<span class="number">12</span>]</span><br><span class="line">my_tuple2=(<span class="built_in">list</span>,<span class="number">32</span>,<span class="number">65</span>,<span class="string">&quot;tu&quot;</span>)</span><br><span class="line">my_tuple2[<span class="number">0</span>].append(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple2)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231208153918364.png" alt="image-20231208153918364"></p><hr><h2 id="3-2-元组常规操作">3.2 元组常规操作</h2><p>元组由于其不可修改特性，所以具有操作的方式如下</p><table><thead><tr><th style="text-align:center">使用方式</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">名称.index(元素)</td><td style="text-align:center">查找某个元素下标</td></tr><tr><td style="text-align:center">名称.count(元素)</td><td style="text-align:center">统计某个元素出现次数</td></tr><tr><td style="text-align:center">len(元组)</td><td style="text-align:center">统计元组有多少元素</td></tr></tbody></table><hr><h1>4. 字符串及其操作（str）</h1><p>字符串的本质为一个容器，并且不可修改。</p><p><em><strong>但是字符串拥有替换功能（replace）</strong></em></p><p>基本语法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.replace(字符串<span class="number">1</span>，字符串<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>其功能为将字符串1内容换为字符串2内容。从而==得到一个新的字符串==</p><p>示例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_st=<span class="string">&quot;you and me&quot;</span></span><br><span class="line">new_st=my_st.replace(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;him&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_st)</span><br><span class="line"><span class="built_in">print</span>(new_st)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="C:/Users/LYsnowQ/AppData/Roaming/Typora/typora-user-images/image-20231208155759283.png" alt="image-20231208155759283"></p><p>原字符串并未改变</p><p><em><strong>字符串还可以进行分割（split）</strong></em></p><p>基本语法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.split(分割字符串)</span><br></pre></td></tr></table></figure><p>功能：将字符串分割成多个字符串</p><p>==将会得到一个列表，而字符串本体不变==</p><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;hello you and me&quot;</span></span><br><span class="line"><span class="built_in">list</span>=<span class="built_in">str</span>.split(<span class="string">&quot; &quot;</span>)<span class="comment">#这里我们将有空格的地方分开</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231208172800281.png" alt="image-20231208172800281"></p><p><em><strong>字符串的整规功能(strip)</strong></em></p><p>基本语法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.strip(字符串)<span class="comment">#若不填则默认为空格</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_str1=<span class="string">&quot; hello &quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_str1.strip())</span><br><span class="line">my_str2=<span class="string">&quot;1221hello221&quot;</span></span><br><span class="line"><span class="built_in">print</span>(my_str2.strip(<span class="string">&quot;122&quot;</span>))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231208173504300.png" alt="image-20231208173504300"></p><p><em><strong>字符串也可以进行count和len的功能</strong></em></p><p><em><strong>字符串的另一个特性：切片（列表和元组均支持）：</strong></em></p><p>基本语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">序列[开始元素下标：结束元素下标：步长]</span><br></pre></td></tr></table></figure><p>在这个语法中需要注意的是：</p><ul><li><strong>起始和结束都可以省略，表示从头开始直到结尾，步长空着默认为1</strong></li><li><strong>步长为1为一个一个取，为2则取一个跳过一个，如果为负数则倒着取</strong></li><li><strong>结束时不包含结束元素下标</strong></li><li><strong>开始元素和结束元素可以取负</strong></li></ul><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;爱党爱国爱人民&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">4</span>:<span class="number">6</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[-<span class="number">3</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[-<span class="number">3</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:-<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231208174433051.png" alt="image-20231208174433051"></p><h1>5. 集合（set）</h1><p>集合特点：</p><ul><li>没有重复元素（即使录入了输出时也只会留下一个）</li><li>无序（不支持下标索引）</li></ul><p>基本语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">集合名称=&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">集合名称=()</span><br></pre></td></tr></table></figure><p>示例集合的基础使用：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">my_set1=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">4532</span>,<span class="number">123</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#集合添加元素</span></span><br><span class="line">my_set1=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">4532</span>,<span class="number">123</span>&#125;</span><br><span class="line">my_set1.add(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机取出(移除一个元素)</span></span><br><span class="line">my_set1=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">4532</span>,<span class="number">123</span>&#125;</span><br><span class="line">ele=my_set1.pop()</span><br><span class="line"><span class="built_in">print</span>(ele)</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除元素</span></span><br><span class="line">my_set1=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">4532</span>,<span class="number">123</span>&#125;</span><br><span class="line">ele2=my_set1.remove(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(my_set1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空集合</span></span><br><span class="line">my_set1=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">4532</span>,<span class="number">123</span>&#125;</span><br><span class="line">my_set1.clear()</span><br><span class="line"><span class="built_in">print</span>(my_set1)</span><br></pre></td></tr></table></figure><p><em><strong>集合的差集：重新得到一个集合，集合1有而集合2没有的元素组成的集合</strong></em></p><p>基本语法如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合<span class="number">1.</span>difference(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_set1=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">4532</span>,<span class="number">123</span>&#125;</span><br><span class="line">my_set2=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">123</span>&#125;</span><br><span class="line">dif=my_set1.difference(my_set2)</span><br><span class="line"><span class="built_in">print</span>(dif)</span><br></pre></td></tr></table></figure><p><em><strong>消除差集：在集合1内删除集合2的内容</strong></em></p><p>基本语句如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合<span class="number">1.</span>difference_update(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_set1=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">4532</span>,<span class="number">123</span>&#125;</span><br><span class="line">my_set2=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">123</span>&#125;</span><br><span class="line">my_set1.difference_update(my_set2)</span><br><span class="line"><span class="built_in">print</span>(my_set1)</span><br></pre></td></tr></table></figure><p><em><strong>集合合并：将两个集合合并为一个</strong></em></p><p>基本语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">集合<span class="number">1.</span>union(集合<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_set1=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">4532</span>,<span class="number">123</span>&#125;</span><br><span class="line">my_set2=&#123;<span class="number">12</span>,<span class="number">345</span>,<span class="number">123</span>,<span class="string">&quot;hello&quot;</span>&#125;</span><br><span class="line">my_set3=my_set1.union(my_set2)</span><br><span class="line"><span class="built_in">print</span>(my_set3)</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><strong>集合的添加元素使用add</strong></li><li><strong>集合的差集时得到一个新集合并非改变原集合</strong></li><li><strong>消除差集则是修改了集合1内容，没有改变集合2内容</strong></li><li><strong>集合合并后相同元素会只存在一个被保留</strong></li></ol><hr><h1>6. 字典（dirt）</h1><p>字典的功能是存储键值对，通过key找值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">&#123;key1:value1,key2:value,key3:value&#125;</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">字典名=&#123;key1:value1,key2:value,key3:value&#125;</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">字典名称=&#123;&#125;</span><br><span class="line">字典名称=<span class="built_in">dict</span>()</span><br></pre></td></tr></table></figure><p>==<strong>注意：字典的key值不能重复，value可以重复</strong>==</p><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dirt=&#123;<span class="string">&quot;张三&quot;</span>:<span class="number">13</span>,<span class="string">&quot;李四&quot;</span>:<span class="number">14</span>,<span class="string">&quot;王五&quot;</span>:<span class="number">15</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dirt[<span class="string">&quot;张三&quot;</span>])</span><br></pre></td></tr></table></figure><p><em><strong>字点新增元素和改变value</strong></em></p><p>基本语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dirt=&#123;key1:value1,key2:value,key3:value&#125;</span><br><span class="line">my_dirt[key]=value0</span><br></pre></td></tr></table></figure><p>==当key已经存在于字典时则是修改value==</p><p>==如果 不存在key则相当于添加键值对==</p><p><em><strong>字典删除和清空：</strong></em></p><p>删除基本语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典.pop(key)</span><br></pre></td></tr></table></figure><p>==<strong>将key对应的value取出，同时字典被修改，对应键值对被删除</strong>==</p><p>清空基本语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典.clear()</span><br></pre></td></tr></table></figure><p><em><strong>字典获取全部key</strong></em></p><p>基本语法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典.keys()</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_dirt=&#123;<span class="string">&quot;张三&quot;</span>:<span class="number">13</span>,<span class="string">&quot;李四&quot;</span>:<span class="number">14</span>,<span class="string">&quot;王五&quot;</span>:<span class="number">15</span>&#125;</span><br><span class="line">keys=my_dirt.keys()</span><br><span class="line"><span class="built_in">print</span>(keys)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231208182456728.png" alt="image-20231208182456728"></p><p><em><strong>字典的遍历</strong></em></p><p>字典低遍历结果是显示key值，如果需要显示value值需要使用dirt[key]</p><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_dirt=&#123;<span class="string">&quot;张三&quot;</span>:<span class="number">13</span>,<span class="string">&quot;李四&quot;</span>:<span class="number">14</span>,<span class="string">&quot;王五&quot;</span>:<span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> my_dirt:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;字典key为<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;字典value为<span class="subst">&#123;my_dirt[key]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果为：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231208182958321.png" alt="image-20231208182958321"></p><p><strong>字典也支持使用len函数统计数量</strong></p><hr><h1>7. 容器通用操作</h1><p><em><strong>max（容器）：找到容器中最大的值</strong></em></p><p><em><strong>min（容器）：找到到容器中最小值</strong></em></p><p><em><strong>list（容器）：将容器转化为列表</strong></em></p><p><em><strong>tuple（容器）：将容器转化为元组</strong></em></p><p><em><strong>str（容器）：将容器转化为字符串</strong></em></p><p><em><strong>sorted（容器,[reverse=Ture]）(中括号为是否开起倒序排序,中括号使用时去掉)：排序</strong></em></p><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">example=<span class="string">&quot;123 aksdfkdj 12987&quot;</span></span><br><span class="line">my_dirt=&#123;<span class="string">&quot;张三&quot;</span>:<span class="number">13</span>,<span class="string">&quot;李四&quot;</span>:<span class="number">14</span>,<span class="string">&quot;王五&quot;</span>:<span class="number">15</span>&#125;</span><br><span class="line">list2=<span class="built_in">list</span>(my_dirt)</span><br><span class="line">list1=<span class="built_in">list</span>(example)</span><br><span class="line">tuple1=<span class="built_in">tuple</span>(example)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(tuple1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(my_dirt))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(example))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(example,reverse=Ture)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231208185035639.png" alt="image-20231208185035639"></p><p>==<strong>注意：字典转化后只剩key，字符串转化后每个字符都被单独分出来了，在排序中字典也会丢失value</strong>==</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1. 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;数据容器的目的是运用少量的彬良存储大量数据，如一个name变量存储多个名字。使变量的运用更加高效。&lt;/p&gt;
&lt;p&gt;数据容器的的概念是：一种额可以容纳多份数据的数据的数据类型，容纳的每份数据称之为一个元素，每一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++基础学习及与C语言的对比分析</title>
    <link href="https://www.fomal.cc/posts/fc0b9602.html"/>
    <id>https://www.fomal.cc/posts/fc0b9602.html</id>
    <published>2023-11-30T07:31:32.301Z</published>
    <updated>2023-12-01T05:09:00.427Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1 c++的空间开辟和释放</h1><h2 id="1-1-c-的空间开辟">1.1 c++的空间开辟</h2><p>C++中开辟空间不同于c语言。他为我们提供了更加便利的空间开辟方式——new运算符。</p><p>基本格式如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>*p=<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>上述代码意思是开辟一块10个空间为整数存放。==注意：这里是开辟10个字节的整形空间，可以理解为开始10个字节空间是存储整形的，并非10个整形空间==</p><p>而在c语言中是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>相比之下，c++对其代码和结构做了更多优化。</p><p>那么开辟10个整形空间大小就用如下方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>*p=<span class="keyword">new</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>这里就开辟了10个整形大小空间，即10*4个字节大小。<strong>(开辟了一个数组)</strong></p><p>在c语言中是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>*p=(<span class="type">int</span>*)mallooc(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>==注意：如果开辟10个字节我们用的是”（）“小括号，如果是10个整形空间，我们就用的是“”[]”中括号==</p><p>c++中仿照数组的命名形式将其优化，使得代码更加高效。</p><hr><h2 id="1-2-c-的空间释放">1.2 c++的空间释放</h2><p>在空间的释放中，c与c++也有着不同之处</p><p>c++的空间如果是第一种用int（10）声明的那么释放如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> p;</span><br></pre></td></tr></table></figure><p>c语言中如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span> (p);</span><br></pre></td></tr></table></figure><p>如果是c++中声明了一个数组则是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> [] p;</span><br></pre></td></tr></table></figure><p>==注意：这里则是在其中加一个中括号才可以完全释放数组，否则只会释放首元素的地址空间==</p><p>在c语言中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure><p>依旧是如此就可以了。</p><p><strong>那么这里我们可以理解为c语言中只是进行了一个地址分配了4*10个空间，而c++中则是分配了10个int类型的地址空间。</strong></p><p>**c语言中，目前只有c99标准可以使用动态参数定义数组，否则就需要用malloc申请动态空间去定义自定义数组。**c++对其进行了优化。</p><hr><h1>2. c++的引用</h1><p>在c++中有个引用的方式，可以理解为为一个空间起多个变量名字，基本格式如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b=a;</span><br></pre></td></tr></table></figure><p>此时就完成了引用。那么当我们输出b和a时如下</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231130164320509.png" alt="image-20231130164320509"></p><p>那么这里与直接将a的值赋值给b有什么区别呢？我们说这里我们是给a的地址起了个别名，就意味着，我们对b的操作是可以影响到a的。看以下示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b=a;</span><br><span class="line"></span><br><span class="line">b=<span class="number">20</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a的值为：&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b的值为：&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>输出结果如下</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231130164607558.png" alt="image-20231130164607558"></p><p>我们可以发现，b的操作可以影响到a。所以与a直接赋值给b是有区别的。这里对b的赋值操作直接影响了a。</p><p><strong>在使用引用时要注意以下几点：</strong></p><ol><li><strong>引用必须初始化，即声明时就要将其赋值。</strong></li><li><strong>引用初始化后不可改变（我们可以看见b=20时只是改变了地址对应的空间存储的值）。</strong></li><li><strong>引用时不可以用数值直接赋值（常量引用可以）。</strong></li><li><strong>在引用函数中，不要将局部变量返回出来（因为函数中的局部变量在函数结束时会销毁）</strong></li></ol><p><strong>引用的本质：</strong></p><p>​<strong>引用实际上是常量指针的形式，也就解释了为什么引用的操作可以影响原空间并且引用初始化后不可以更改引用的对象了。</strong></p><p>在上述例子中我们可以有如下分析</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp;b=a;<span class="comment">//这里即为int* const b=&amp;a;</span></span><br><span class="line">b=<span class="number">20</span>;<span class="comment">//可以理解为 *b=20;</span></span><br></pre></td></tr></table></figure><p><strong>那么在函数中，引用的作用是方便修改实参。优点在于简化了指针修改实参。</strong></p><p>引用中也有常量引用，即用const修饰，==常量引用最大的作用是防止误操作，因为引用会对原数据造成修改，在引用时需要保护起来，一半用于函数的参数传递，防止修改了其值。==</p><p>例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b的值为：&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">14</span>;</span><br><span class="line">    <span class="type">int</span> &amp;b=a;</span><br><span class="line">    <span class="built_in">print</span>(&amp;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外还有另一种用法const修饰的引用可以直接使用赋值</p><p>示例如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;b=<span class="number">10</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b的值为：&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231130171534435.png" alt="image-20231130171534435"></p><p>其原理可以拆成如下方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;b=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//分为两步</span></span><br><span class="line"><span class="comment">//第一步，系统会自动创建一个变量int temp=10（名字我们不知道，temp只是做举例）</span></span><br><span class="line"><span class="comment">//第二步，系统再执行const int &amp;b=temp;</span></span><br></pre></td></tr></table></figure><hr><h1>3. c++函数及其用法</h1><h2 id="3-1-函数默认参数">3.1 函数默认参数</h2><p>在c++中的函数是有默认参数的</p><p>下面为例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">20</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a+b=&quot;</span>&lt;&lt;<span class="built_in">add</span>(<span class="number">10</span>)&lt;&lt;endl;<span class="comment">//第一个输出</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a+b=&quot;</span>&lt;&lt;<span class="built_in">add</span>(<span class="number">10</span>,<span class="number">40</span>)&lt;&lt;endl;<span class="comment">//第二个输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将b直接赋值，在调用用函数时只传进去一个数，那么他就会默认给形参a赋值。(第一个输出)，然后20就是b的默认参数</p></li><li><p>那么当我们传入两个数值时40便会覆盖b的20（第二个输出）。</p></li></ul><p><strong>注意：</strong></p><ol><li><strong>当我们设置了默认参数后，此参数以后的参数都必须设置默认参数</strong></li><li><strong>默认参数在声明和函数定义时只能设置一次，即声明和定义中只能有一个有默认参数。</strong></li></ol><hr><h2 id="3-2-函数的占位参数">3.2 函数的占位参数</h2><p>c++中函数可有有占位参数，用来占位使用。</p><p>基本语法结构为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span>)</span></span>&#123;<span class="comment">//此处第二个参数只有类型的为占位参数</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且占位参数也可以有默认参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> = <span class="number">10</span>)</span></span>&#123;<span class="comment">//此处第二个参数只有类型的为占位参数并且不需要名字直接可以赋值默认值</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：默认参数调用时必须传入数据</strong></p><hr><h2 id="3-3-函数重载">3.3 函数重载</h2><p>即函数名可以相同（c语言不具备此重要性质）</p><p>优点：可以提高复用性</p><p>函数重载条件：</p><ol><li>同一个作用域下。</li><li>函数名称相同</li><li>函数参数的 <strong>类型不同</strong> 或者 <strong>个数不同</strong>或者 <strong>顺序不同</strong></li></ol><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;this is a text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">float</span> a)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;this is a text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;this is a text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> b,<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;this is a text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引用参数的函数示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span>&amp;a)</span></span>&#123;<span class="comment">//调用此参数时需要传入变量名</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;this is a text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span>&#123;<span class="comment">//调用此函数时需要直接传入数值</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;this is a text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==<strong>注意：函数重载时尽量不要写默认参数，不然容易出现歧义。</strong>==</p><p>如下==<strong>反例</strong>==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">10</span>)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;this is a text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;this is a text&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如上当我们只传递一个数值时会分不清使用哪个函数，所以会报错。<strong>（但是如果传入两个值会执行第一个函数）</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1 c++的空间开辟和释放&lt;/h1&gt;
&lt;h2 id=&quot;1-1-c-的空间开辟&quot;&gt;1.1 c++的空间开辟&lt;/h2&gt;
&lt;p&gt;C++中开辟空间不同于c语言。他为我们提供了更加便利的空间开辟方式——new运算符。&lt;/p&gt;
&lt;p&gt;基本格式如下&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文件操作</title>
    <link href="https://www.fomal.cc/posts/95495db.html"/>
    <id>https://www.fomal.cc/posts/95495db.html</id>
    <published>2023-11-24T02:52:00.331Z</published>
    <updated>2023-11-24T07:15:31.280Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1. 概述</h1><p>文件分为两种：</p><ol><li>磁盘文件：指一组有关数据的有序集合，通常存储在外部介质（如硬盘）上，使用时才调入内存。</li><li>设备文件：设备文件：操作系统中，把每个与主机相连的的输入输出设备看作一个文件，把他们的输入输出作为磁盘的读写。</li></ol><p>磁盘文件分类：</p><ol><li>文本文件：基于字符编码的文件，可以用文本编辑器直接打开，并且数以ASCII编码形式存在。</li><li>二进制文件：基于值编码文件，数字的存储以二进制形式，内存中数据按照在内存中的原样输出到磁盘。</li></ol><p>除了文本文件其他的基本都是二进制文件。（如图片，音频等）</p><hr><h1>2. 文件的打开关闭</h1><p>文件指针：用指针指向文件的指针。（FLIE*）</p><p><strong>当打开文件时文件会放在缓冲区中。</strong></p><p>打开文件的函数：fopen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE*P=fopen(<span class="string">&quot;文件地址&quot;</span>，读取方式)；<span class="comment">//路径地址用“/”</span></span><br></pre></td></tr></table></figure><p>读取方式有以下几种：</p><table><thead><tr><th>打开模式</th><th>意义</th></tr></thead><tbody><tr><td>r/rb</td><td>以只读方式打开一个文件（不会自动创建文件，如果不存在文件就会报错）</td></tr><tr><td>w\wb</td><td>以写的方式打开文件（如果文件不存在，系统就会创建一个文件，如果文件有内容，则会覆盖原内容）</td></tr><tr><td>a/ab</td><td>以追加方式打开文件，在末尾添加内容（如果不存在，系统会自动创建一个文件）</td></tr><tr><td>r+/rb+</td><td>以可读可写的方式打开文件（不会创建新文件）</td></tr><tr><td>w+/wb+</td><td>以可读可写的方式i打开一个文件（如果文件存在就会覆盖原文件内容，文件不存在则创建一个文件）</td></tr><tr><td>a+/ab+</td><td>以添加方式打开文件，在文件末尾更改（如果文件不存在则会创建一个文件）</td></tr></tbody></table><p>在文件打开后我们应该将文件关闭。使用fclose函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE*p)</span>;</span><br><span class="line"><span class="comment">//如果成功，则会返回0，如果失败则会返回-1</span></span><br></pre></td></tr></table></figure><ul><li>一个程序进程能打开的文件是有限制的。</li><li>如果文件未关闭，那么操作系统会在进程结束后统一关闭</li></ul><p>读取出错原因可能有：</p><ol><li>找不到文件（路径有误）。</li><li>文件权限限制。</li><li>文件同时打开个数上限。（最多65535个）</li></ol><hr><h1>3. 文件的读写</h1><h2 id="文件读取：">文件读取：</h2><p>我们在读写字符文件时使用fgetc和fputc函数用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(文件指针)</span>;</span><br></pre></td></tr></table></figure><p>成功时会返回读取到的字符，失败为-1；</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设我们创建了个txt文本文件，里面写了个A</span></span><br><span class="line"></span><br><span class="line">FILE*p=fopen(<span class="string">&quot;D:/Desktop/A.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ch=fgetc(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br></pre></td></tr></table></figure><p>最后输出结果为A</p><p>注意：</p><blockquote><p><strong>那当我们输出字符串时不需要对指针进行移动，因为 在文件读取中，其中的光标在读取完文件一个字符后会自动往前进一格。所以只需要循环就行了。并且修改文件指针会出错，所以不能修改文件指针。 在文件结尾默认是-1，原因是在文本文件中是以ASCII码存储，都为正，汉字虽然是负数名单时-1不表示汉字。所以结尾为-1。并且文件结尾使用EOF表示==（以上规则只适用于文本文件）==，一般在文件开头就用define定义EOF为-1。</strong></p><p><strong>如果为二进制文件则可以使用feof函数判断文件是否结束，并且feof函数既可以判断二进制文件也可以判断文本文件。当到文件结尾时返回值为非0数，没到时为0（判断的时最后一次读取操作）</strong></p></blockquote><hr><h2 id="文件写入">文件写入</h2><p>文件写入时我们在文件打开方式中应该先换为w。</p><p>写入用fputc函数格式为</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fputc</span>(字符,文件指针);</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;FILE*p=fopen(<span class="string">&quot;D:/Desktop/A.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">fputc(ch);</span><br><span class="line">fclose(p);</span><br></pre></td></tr></table></figure><p>在文件写入中出错概率比单纯读取文件出错概率小，在文件损坏或文件的路径有误时文件会被直接创建，所以写入文件出错一般为：</p><pre><code>1. 文件打开上限。1. 文件的权限限制</code></pre><p>在写入过程中，如果问我们加上循环就可以在文件里编写大量文段</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FILE*p=fopen(<span class="string">&quot;D:/Desktop/A.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">FILE*p1=fopen(<span class="string">&quot;D:/Desktop/a.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>((ch=fgetc(p))!=EOF)&#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    fputc(ch,p);</span><br><span class="line">&#125;</span><br><span class="line">fclose(p);</span><br></pre></td></tr></table></figure><hr><h1>4. 文件的加密解密</h1><p>文件加密解密的基本原理时基于字符由ASCII码存储，所以，我们在输入狗移动字符对应的数字即可改变内容，在解密时以相同的方式相反移动同样的大小就能恢复。</p><p>例子：</p><p>（A.txt用来显示正常文件，a.txt用来显示加密文件）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EOF -1</span></span><br><span class="line"></span><br><span class="line">FILE*p=fopen(<span class="string">&quot;D:/Desktop/A.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">FILE*p1=fopen(<span class="string">&quot;D:/Desktop/a.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>((ch=fgetc(p)) != EOF)&#123;</span><br><span class="line"> ch++;</span><br><span class="line">    fputc(ch,p1);</span><br><span class="line">&#125;</span><br><span class="line">fclose(p);</span><br><span class="line">fclose(p1);</span><br></pre></td></tr></table></figure><p>这时我们会得到一份a.txt文件即为加密后的文件，如果相对a.txt文件解密，只需要在加密基础上倒过来ch–就可以了。</p><hr><h1>5. 文件行的读写</h1><h2 id="文件读取">文件读取</h2><p>我们使用fgetc进行文件行的读取</p><p>基本格式如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">fgets</span><span class="params">(字符串指针,最大长度,文件指针)</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FILE*p=fopen(<span class="string">&quot;D:/Desktop/A.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* pp=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">100</span>);</span><br><span class="line"><span class="built_in">memset</span>(pp,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">fgets(pp,<span class="number">100</span>,p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);</span><br><span class="line"><span class="built_in">free</span>(pp);</span><br><span class="line">fclose(p);</span><br></pre></td></tr></table></figure><p>注意：</p><p><strong>在操作中，==我们设定的大小中会预留一个位置存储“\0”,即我们设置的为100个位置，有效字符位置只有99个==。当读取到换行时，会自动换行，并且会结束读取 。在一轮读取后下次读取时依旧会以现在的位置继续读取，即光标会自动移到下一位。</strong></p><p>循环读取示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FILE*p=fopen(<span class="string">&quot;D:/Desktop/A.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* pp=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">100</span>);</span><br><span class="line"><span class="keyword">while</span>(!feof(p))<span class="comment">//当文件到了结尾返回0，没到时返回为非0值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(pp,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">fgets(pp,<span class="number">100</span>,p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(pp);</span><br><span class="line">fclose(p);</span><br></pre></td></tr></table></figure><p>上述代码中每次我们都会执行一次memset是为了防止上次读取污染本次读取。</p><hr><h2 id="文件写入-2">文件写入</h2><p>我们使用fputs进行行写入</p><p>基本格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fputs</span>（常量字符串,文件指针）;</span><br></pre></td></tr></table></figure><p>当fputs在字符串中遇到\n时也会进行换行操作，遇到\0直接停止。</p><p>示例演示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FILE*p=fopen(<span class="string">&quot;D:/Desktop/A.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch[]=<span class="string">&quot;这是一个测试&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fputs</span>(ch,p);</span><br><span class="line">fclose(p);</span><br></pre></td></tr></table></figure><p>连续的输入如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FILE*p=fopen(<span class="string">&quot;D:/Desktop/A.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>*pp=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">1024</span>);</span><br><span class="line"><span class="keyword">while</span>（<span class="number">1</span>）&#123;</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="number">1024</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,pp);<span class="comment">//接收除了换行以外的所有输入</span></span><br><span class="line">    getchar();<span class="comment">//防止打完第一行后卡住无法换行</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(p,<span class="string">&quot;cmd=exit&quot;</span>)<span class="comment">//也可使用strncmp(p,&quot;cmd=exit&quot;,8))</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    stract(pp,<span class="string">&quot;\n&quot;</span>);<span class="comment">//追加换行符</span></span><br><span class="line">    <span class="built_in">fputs</span>(pp,p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1. 概述&lt;/h1&gt;
&lt;p&gt;文件分为两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;磁盘文件：指一组有关数据的有序集合，通常存储在外部介质（如硬盘）上，使用时才调入内存。&lt;/li&gt;
&lt;li&gt;设备文件：设备文件：操作系统中，把每个与主机相连的的输入输出设备看作一个文件，把他们的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="https://www.fomal.cc/posts/7b216a3b.html"/>
    <id>https://www.fomal.cc/posts/7b216a3b.html</id>
    <published>2023-11-20T03:56:21.829Z</published>
    <updated>2023-11-22T17:00:43.577Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1，概述</h1><p>树：</p><ul><li>树是一个n个结点的有限集，如果n=0称之为空树。</li><li>树的定义是递归的，树中又调用了自身。</li><li>树的根节点没有前驱，除了根节点，其他所有节点有且只有一个前驱</li><li>树中所有节点可以有0个或者多个后驱。</li></ul><p>二叉树：</p><ul><li><p>特殊的树结构</p></li><li><p>每个结点至多只有两个子树</p></li></ul><p>遍历方式：</p><ul><li>前中后 根节点遍历</li></ul><p>前序：根-&gt;左-&gt;右</p><p>中序：左-&gt;根-&gt;右</p><p>后序：左-&gt;右-&gt;根</p><p>如图所示：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231120123206399.png" alt="image-20231120123206399"></p><p>在这里需要注意的是，根是相对的，左右也是相对的，以A为根，左右为B,C。以B为根，左右为D，F。</p><ul><li>前序时，开始根为A然后是A-B-D,此时根为B，所以退出D进入E。</li><li>中序时，开始从D开始，然后根为B，所以是D-B-E,然后退出E进入A。</li><li>后序时，开始从D开始，然后去E，再去根B，然后进入F-G-C最后到A。</li></ul><h1>2. 树的创建</h1><p>树的创建中我们每次都会调用相同的结构体，所以我们使用递归来重复定义和写入预设代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TREECREAT</span> &#123;</span></span><br><span class="line"><span class="type">char</span> name;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TREECREAT</span>* <span class="title">LEFT</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TREECREAT</span>* <span class="title">RIGHT</span>;</span></span><br><span class="line">&#125;TREE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的逻辑</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TREERE</span><span class="params">(TREE** t)</span> &#123;</span><br><span class="line"><span class="type">char</span> name;</span><br><span class="line"><span class="comment">//name = getchar();</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;name);</span><br><span class="line"><span class="keyword">if</span> (name==<span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//此时为空节点</span></span><br><span class="line">*t = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//此时不为空</span></span><br><span class="line">*t = (TREE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREE));</span><br><span class="line">(*t)-&gt;name = name;</span><br><span class="line"><span class="comment">//左子树</span></span><br><span class="line">TREERE(&amp;((*t)-&gt;LEFT));</span><br><span class="line"><span class="comment">//右子树</span></span><br><span class="line">TREERE(&amp;((*t)-&gt;RIGHT));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">TREE* t ;</span><br><span class="line">TREERE(&amp;t);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再上述过程中，我们将结构重复使用，避免了每次定义的繁杂过程。我们传入二级指针来修改指向。这时我们的录入得到顺序为根-&gt;左-&gt;右，并且是层级递增。如果需要先录入右侧，只需要更改两条代码的位置即可。</p><h1>3.树的遍历</h1><h2 id="3-1普通遍历">3.1普通遍历</h2><p>树的遍历有前序，中序，后续三种。其区别并不大==仅仅需要改变代码优先执行的顺序即可==</p><p>前序如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树的遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printtree1</span><span class="params">(TREE* p)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//前序</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, p-&gt;name);</span><br><span class="line">printtree1(p-&gt;LEFT);</span><br><span class="line">printtree1(p-&gt;RIGHT);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树的遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printtree2</span><span class="params">(TREE* p)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//中序</span></span><br><span class="line">printtree2(p-&gt;LEFT);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, p-&gt;name);</span><br><span class="line">printtree2(p-&gt;RIGHT);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树的遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printtree3</span><span class="params">(TREE* p)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//后序</span></span><br><span class="line">printtree3(p-&gt;LEFT);</span><br><span class="line">printtree3(p-&gt;RIGHT);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, p-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其本质在于printf的位置，即根的输出与左右分枝的执行顺序。</p><h2 id="3-2-层次遍历">3.2 层次遍历</h2><p>层次遍历相当于树的同级结构的遍历，如图：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231120123206399.png" alt="image-20231120123206399"></p><p>层次遍历就相当于是A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G的顺序进行遍历，这里b和c是同一级，defg为同一级。这里由于我们用递归定义的树结构，这里层级遍历就需要用到队的结构去实现。</p><p>由于层次遍历，我们可以改变一下录入规则去使用它</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//树模块</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TREE</span> &#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TREE</span>* <span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TREE</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125;TREE;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列模块</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QUEUE</span> &#123;</span></span><br><span class="line">TREE* arr[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> bottom;<span class="comment">//用整形计数</span></span><br><span class="line">&#125;QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initqueue</span><span class="params">(QUEUE* q)</span> &#123;</span><br><span class="line">(*q).front = (*q).bottom = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">put</span><span class="params">(QUEUE* q1, TREE* p2)</span> &#123;</span><br><span class="line">(*q1).arr[(*q1).front++] = p2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TREE* <span class="title function_">pop</span><span class="params">(QUEUE* q)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((*q).front == (*q).bottom)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> ((*q).arr[(*q).bottom++]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配是否符合条件</span></span><br><span class="line">TREE* <span class="title function_">search</span><span class="params">(TREE* tr)</span> &#123;</span><br><span class="line">QUEUE* q;</span><br><span class="line">TREE* p;</span><br><span class="line">initqueue(&amp;q);</span><br><span class="line"><span class="keyword">if</span> (tr-&gt;left == <span class="literal">NULL</span> || tr-&gt;right == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> tr;</span><br><span class="line">&#125;</span><br><span class="line">put(&amp;q, tr);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">p = pop(&amp;q);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left != <span class="literal">NULL</span>) &#123;</span><br><span class="line">put(&amp;q, p-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span>) &#123;</span><br><span class="line">putqueue(&amp;q, p-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化树</span></span><br><span class="line">TREE* <span class="title function_">inittree</span><span class="params">(TREE**p)</span> &#123;</span><br><span class="line">TREE* pp = *p;</span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;data);</span><br><span class="line">pp = (TREE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREE));</span><br><span class="line">pp-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">pp-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">pp-&gt;data = data;</span><br><span class="line">*p = pp;</span><br><span class="line"><span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">TREE* p, * q;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">q = (TREE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TREE));</span><br><span class="line">q-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入节点字母：\n&quot;</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line">q-&gt;data = ch;</span><br><span class="line">p = search(&amp;q);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;left) &#123;</span><br><span class="line">p-&gt;left = q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">p-&gt;right = q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">TREE* p;</span><br><span class="line">inittree(&amp;p);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我么能用整形数来计算和存储队列，我们每次输入树的根时都会进行判定，左右，如果左没有就填充左，然后判定右边，不同的时，每次录入都会判定左右的根是否为空，然后按层次录入。从而每次录入时进行队列的录入，于是完成了层次遍历的存储条件。</p><hr><h1>3. 资料参考</h1><p>【UP从0到1带你手撕数据结构全集(C语言版)】<a href="https://www.bilibili.com/video/BV1W64y1z7jh?p=13&amp;vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1W64y1z7jh?p=13&amp;vd_source=602097138258a0057a732e44579de1ed</a></p><p>【数据结构上机-通过层次遍历演示完全二叉树的建立与遍历-C语言上机代码完整实现】<a href="https://www.bilibili.com/video/BV1PF411E7ja?vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1PF411E7ja?vd_source=602097138258a0057a732e44579de1ed</a></p><p>【层次遍历C语言实现】<a href="https://www.bilibili.com/video/BV1HM4y1u7fV?vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1HM4y1u7fV?vd_source=602097138258a0057a732e44579de1ed</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1，概述&lt;/h1&gt;
&lt;p&gt;树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;树是一个n个结点的有限集，如果n=0称之为空树。&lt;/li&gt;
&lt;li&gt;树的定义是递归的，树中又调用了自身。&lt;/li&gt;
&lt;li&gt;树的根节点没有前驱，除了根节点，其他所有节点有且只有一个前驱&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>字符串匹配</title>
    <link href="https://www.fomal.cc/posts/ef3a3fcc.html"/>
    <id>https://www.fomal.cc/posts/ef3a3fcc.html</id>
    <published>2023-11-19T10:45:30.322Z</published>
    <updated>2023-11-19T16:56:43.417Z</updated>
    
    <content type="html"><![CDATA[<hr><p>预览预定义的代码结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">STRING</span> &#123;</span></span><br><span class="line"><span class="type">char</span>* st;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line">&#125;STR;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化字符串</span></span><br><span class="line">STR* <span class="title function_">initstring</span><span class="params">()</span> &#123;</span><br><span class="line">STR* str = (STR*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(STR));</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span>* st = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串赋值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">strAssign</span><span class="params">(STR* str, STR* st)</span> &#123;</span><br><span class="line"><span class="comment">//判断返回的data是否有值,防止野指针的出现</span></span><br><span class="line"><span class="keyword">if</span> (!str-&gt;st)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(str-&gt;st);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;<span class="comment">//临时变量储存长度</span></span><br><span class="line"><span class="type">char</span>* temp = st;</span><br><span class="line"><span class="keyword">while</span> (*temp)<span class="comment">//记录长度</span></span><br><span class="line">&#123;</span><br><span class="line">len++;</span><br><span class="line">temp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">str-&gt;st = <span class="literal">NULL</span>;</span><br><span class="line">str-&gt;len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">temp = st;<span class="comment">//因为上面temp依次递增已经轮到了末尾，所以这里再次赋值使其回到原位</span></span><br><span class="line">str-&gt;len = len;<span class="comment">//将len写入</span></span><br><span class="line">str-&gt;st = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (len + <span class="number">1</span>));<span class="comment">//因为在字符串中最后一位为\0，所以要多一位。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++, temp++)<span class="comment">//写入字符</span></span><br><span class="line">&#123;</span><br><span class="line">str-&gt;st[i] = *temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印字符串</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">printchar</span><span class="params">(STR*str)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str-&gt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(i == <span class="number">0</span> ? <span class="string">&quot;%c&quot;</span> : <span class="string">&quot;-&gt;%c&quot;</span>, str-&gt;st[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>1. 暴力匹配（BF算法）</h1><p>首先，暴力匹配需要一个主串和一个字串，，由字串和主串一一对应匹配，当主串与子串不匹配时从这次匹配的下一个开始依次判定匹配，直到匹配到最后一个字符。</p><p>示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力匹配代码块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">forceMatch</span><span class="params">(STR*master,STR*sub)</span> &#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>,i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; master-&gt;len &amp;&amp; j &lt; sub-&gt;len) &#123;</span><br><span class="line"><span class="keyword">if</span> (master-&gt;st[i] == sub-&gt;st[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">i = i - j + <span class="number">1</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == sub-&gt;len) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;success\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fail\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主函数的运行如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">STR* string1 = initstring();</span><br><span class="line">STR* string2 = initstring();</span><br><span class="line">strAssign(string1,<span class="string">&quot;HELLO&quot;</span>);</span><br><span class="line">strAssign(string2, <span class="string">&quot;ELL&quot;</span>);</span><br><span class="line">printchar(string1);</span><br><span class="line">printchar(string2);</span><br><span class="line">forceMatch(string1,string2);</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们定义了两个字符串string1，string2.并将其传入到forceMatch中进行匹配。从我们自己的角度可以看出来HELLO中是包含ELL的。那么这里，i和j分别代表string1（主字符串）和string2（子字符串）的匹配时对应的字符位置。然后从住字符串的第一个开始和子字符串中的字符一个跟着一个对比。如果失败就将主字符串移向上一次对比的下一个字符开始重新对比，j继续依次增加，直到j连续到所有字符串都符合或者对比到结尾还未对应时就结束（即不匹配），这里我们匹配就输出success，不匹配就输出fail</p><p>此处例子的运行结果如下：（这里用-“&gt;”隔开了）</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231119184417467.png" alt="image-20231119184417467"></p><hr><h1>2. kmp匹配</h1><ul><li>kmp算法相比于暴力算法，没有暴力匹配算法的回溯，可以快速定位匹配。避开了暴力算法的冗杂的回溯寻找过程。</li><li>kmp算法是一种高效算法，牺牲了一定的空间去保存next数组，提高了匹配效率。相当于保存了索引，引导程序快速找到切入点。</li><li>kmp算法时间复杂度为（n+m）(n为主串长度，m为副串长度)</li></ul><p>next数组：当该字符与主串不匹配后，值对应索引的字符要移动到跟主串不匹配的字符对齐。==next数组存储的为最大公共前后缀+1。==</p><p>在代码实现中我们用这种方式获取next数组，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取next数组</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">NEXT</span><span class="params">(STR* str)</span> &#123;</span><br><span class="line"><span class="type">int</span>* next1 = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * str-&gt;len);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">next1[i] = j;</span><br><span class="line"><span class="keyword">while</span> (i &lt; str-&gt;len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">-1</span> || str-&gt;st[i] == str-&gt;st[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">next1[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = next1[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>那么在匹配时，我们应该是这样操作的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">kmpMatch</span><span class="params">(STR* master, STR* sub,<span class="type">int</span>*next)</span> &#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; master-&gt;len &amp;&amp;j&lt;sub-&gt;len) &#123;</span><br><span class="line"><span class="keyword">if</span> (master-&gt;st[i] == sub-&gt;st[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == sub-&gt;len) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;success!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fail!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上代码我呢可以注意到，与暴力破解最大的不同是，==我们只对j进行操作，并不对i进行操作，也就是不对主串操作。这是kmp匹配和暴力匹配最大的区别==</p><h1>3.资料参考</h1><p>【KMP算法精讲（2）——什么是最长公共前后缀？】<a href="https://www.bilibili.com/video/BV1hX4y1C73S?vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1hX4y1C73S?vd_source=602097138258a0057a732e44579de1ed</a></p><p>【UP从0到1带你手撕数据结构全集(C语言版)】<a href="https://www.bilibili.com/video/BV1W64y1z7jh?p=9&amp;vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1W64y1z7jh?p=9&amp;vd_source=602097138258a0057a732e44579de1ed</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;预览预定义的代码结构：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内存</title>
    <link href="https://www.fomal.cc/posts/593ee330.html"/>
    <id>https://www.fomal.cc/posts/593ee330.html</id>
    <published>2023-11-17T02:09:44.638Z</published>
    <updated>2023-11-17T02:48:52.990Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1. 内存分区</h1><h3 id="1-1-代码区">1.1 代码区</h3><blockquote><p>代码区时程序执行二进制指令的地方，代码区的空间储存的时自己已经写好运行的代码所在的内存空间。代码区，的权限只允许读取，代码区的数据是可以共享的。只读属性体现在程序在执行中无法修改（防止程序意外修改了它的指令）。并且也规划了局部变量的相关信息。</p></blockquote><h3 id="1-2-数据区">1.2 数据区</h3><p>数据区又有：</p><ol><li>未初始化的数据区（bss）</li><li>初始化数据区（data）{包括静态局部变量和静态全局变量}</li><li>常量区</li></ol><h3 id="1-3-栈区（stack）">1.3 栈区（stack）</h3><ul><li><p>栈区时系统为每一个程序分配的一个临时空间。储存的有局部变量，函数信息，函数参数和数组。</p></li><li><p>具有先进后出的特点，由系统分配和释放</p></li><li><p>栈区的大小为1m</p></li><li><p>在windows中栈区可以扩展为10m</p></li><li><p>在linux中可以扩展到16m</p></li></ul><h3 id="1-4-堆区（heap）（取决你的内存大小）">1.4 堆区（heap）（取决你的内存大小）</h3><ul><li>用于存储大数据，图片，音乐，音频等文件</li><li>栈区需要手动开辟（malloc colloc realloc）</li><li>栈区的内存空间也需要手动释放（free）</li></ul><hr><p>在地址分配中，从低地址到高地址依次为：代码区&lt;数据区（常量区）&lt;数据区（data）&lt;数据区（bss）&lt;堆区  &lt; 栈区</p><hr><h1>2. 执行过程</h1><p>程序在加载到内存前，代码区和全局区（data和bss）的大小是固定的，程序运行期间不能改变。然后执行程序，系统将程序加载到内存。并且额外增加了栈区和堆区。</p><hr><h3 id="栈区">栈区</h3><ul><li><p><strong>定义变量时是从高地址往低地址存储，并且不连续（防止其他程序的篡改）。</strong></p></li><li><p><strong>在存储数组时是先开辟一块空间，再由低地址往高地址存储数据</strong></p></li><li><p><strong>栈区的空间是由高地址往低地址增长</strong></p></li><li><p><strong>遵循先进后出，后进先出的规则</strong></p></li></ul><h3 id="堆区">堆区</h3><ul><li>动态内存分配</li><li>需要手动开辟和释放</li><li>如果不释放，系统将在程序结束时释放</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1. 内存分区&lt;/h1&gt;
&lt;h3 id=&quot;1-1-代码区&quot;&gt;1.1 代码区&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;代码区时程序执行二进制指令的地方，代码区的空间储存的时自己已经写好运行的代码所在的内存空间。代码区，的权限只允许读取，代码区的数据是可以共享的。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>全局、局部以及静态变量</title>
    <link href="https://www.fomal.cc/posts/58cc5c90.html"/>
    <id>https://www.fomal.cc/posts/58cc5c90.html</id>
    <published>2023-11-16T08:20:39.454Z</published>
    <updated>2023-11-16T10:44:33.011Z</updated>
    
    <content type="html"><![CDATA[<h1>1. 局部变量</h1><blockquote><p>局部变量是指在代码块局部定义的变量，只能在对应的代码块中使用。离开了这个代码块范围就不允许再被使用。因为在数据存储时局部变量将会被储存在栈中，如同函数一样，使用完后会被销毁，而在声明变量时使用auto，但是一边由于程序默认为auto所以一般省略不写。</p><p>总的来说</p><p>局部变量：在函数内部定义的变量</p><p>作用域：函数内部。</p><p>生命周期：从变量创建到函数结束。</p></blockquote><p>示例1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">str</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述代码中，我们定义了一个名字为a的整形变量（auto可以省略不写）,这里的变量a只能在main中使用，并且作用范围在定义了a直到main函数的结束。在第二个函数 text中，无法引用。如图：</p></blockquote><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231116160913307.png" alt="image-20231116160913307"></p><p>那么我们常用的for函数也是如此，如图：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231116160943406.png" alt="image-20231116160943406"></p><blockquote><p>显然我们看到，当i在for循环之外时已经无法使用，但是如果我们想让i也能使用时，那么我们可以如下方式写：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这样将i定义在main这个大范围的函数中就可以在for值直接调用i，并且对它做出了修改。</p><h1>2. 全局变量</h1><p>全局变量是指可以在同一个文件或项目文件夹中都可以调用的变量。它可以使得我们所有的文件或者函数可以通用一个变量。==但是当其他同项目文件的的文件需要使用时必须对它声明，用extern==,并且全局变量定义时可以不用赋值，系统会自动赋值为0。有此特性我们可以得出全局变量是储存在数据区没有栈区</p><p>总的来说</p><p>全局变量：在函数外部定义的变量</p><p>作用域：在整个项目文件夹</p><p>生命周期：从程序开始到结束</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">text</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">text();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">text</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看看输出结果</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231116162228718.png" alt="image-20231116162228718"></p><p>上述就是一个很经典的全局变量。那么如果全局变量定义后又在局部定义一个同名变量该怎么办呢，看看如下示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231116164452444.png" alt="image-20231116164452444"></p><p>我们发现，这里不仅重复定义a没有报错，还将局部变量的a覆盖了全局变量的a，遵循着就近原则。我们再举一个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">12</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231116165329383.png" alt="image-20231116165329383"></p><p>上述代码中，我们可以看到我们再函数体中又添加了一个大括号，里面写了些内容，这个叫做匿名内部函数，在执行完后内部数据也会被销毁。所以可知，内部函数不影响全局变量的值，全局函数也是如此，变化的值只适用于局部。</p><hr><h1>3. 静态变量</h1><p>静态变量不同的是其数据储存方式和使用，局部静态变量和全局静态变量的生命周期都是由创建到程序结束为止，在局部静态变量中如果未赋值，则系统将会自动赋值为0，而全局静态变量的作用域也发生了改变。总的来说如下：</p><p>静态局部变量：在函数体中只会定义一次，可以对变量多次赋值。</p><p>作用域：函数体内</p><p>生命周期：从创建到程序结束。</p><p>静态全局变量：</p><p>作用域：只能在本文件中调用，不再支持对同项目文件调用。</p><p>生命周期：从创建到函数结束</p><p>静态变量定义方式：</p><p>静态局部：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">text</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    text();</span><br><span class="line">    text();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231116170803564.png" alt="image-20231116170803564"></p><p>这里我们将text执行了两次发现a并没有被销毁，而是被保留，并且没有被重新赋值。</p><h1>4. 全局函数和静态函数</h1><p>所有的函数在默认情况下都是全局函数，可以供整个项目文件调用，而静态函数则是用static所定义的，与全局函数不同的是，静态函数的作用域变为仅供本体文件内部调用，无法由其他文件调用，而全局函数中整个项目文件夹中不能出现同名的函数，而静态函数允许不同文件定义相同名字的函数，静态函数也遵循就近原则，有限调用本文件的函数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1. 局部变量&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;局部变量是指在代码块局部定义的变量，只能在对应的代码块中使用。离开了这个代码块范围就不允许再被使用。因为在数据存储时局部变量将会被储存在栈中，如同函数一样，使用完后会被销毁，而在声明变量时使用auto，但是一边由于</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>哈希</title>
    <link href="https://www.fomal.cc/posts/2e3b1176.html"/>
    <id>https://www.fomal.cc/posts/2e3b1176.html</id>
    <published>2023-11-13T14:38:37.507Z</published>
    <updated>2023-11-14T17:49:33.520Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1. 概述</h1><p>哈希地址：是一个逻辑地址&lt;–哈希函数</p><p>哈希取值方法：</p><ol><li>平方取中法</li><li>取余法</li><li>直接定址法</li><li>折叠法</li></ol><p>哈希冲突：当两个数据的取余值相同时会指向同一个储存地址。</p><p>哈希冲突解决方案 ：</p><ol><li>开放地址法</li><li>邻接表法</li></ol><hr><h1>2. 哈希函数</h1><h2 id="取余法-主要常用">取余法(主要常用)</h2><p>取余法是将数值进行以数组最长长度进行取余从而确定数值存储位置的方法。如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num[<span class="number">6</span>];<span class="comment">//定义6个元素用来存储6个数值</span></span><br><span class="line"><span class="type">int</span> nums[<span class="number">6</span>]=&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">6</span>)&#123;</span><br><span class="line">    <span class="type">int</span> m=nums[i]/<span class="number">6</span>;</span><br><span class="line">    num[m]=nums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是表示当余数为0-5时，那么对应的数值就是放入下标为0-5的数组中进行存储。</p><h2 id="直接定址法">直接定址法</h2><p>直接定址法简单粗暴，缺点是耗费空间。如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nums[]=&#123;<span class="number">22</span>,<span class="number">35</span>,<span class="number">67</span>,<span class="number">56</span>&#125;;</span><br><span class="line">num[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">4</span>)&#123;</span><br><span class="line">    num[nums[i]]=nums[i];</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码就是将数值分配到与之相同的数组下标，那么我们数组开辟的空间时以所有数字中最大的为基准开辟的，故及其浪费时间；</p><hr><h1>3. 哈希冲突及其解决</h1><p>哈希冲突是当有两个相同的值的时候会占据相同位置。那么我们可以用<strong>开放地址法</strong>解决</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回到上面取余法的方法</span></span><br><span class="line"><span class="type">int</span> num[<span class="number">7</span>];<span class="comment">//定义6个元素用来存储6个数值</span></span><br><span class="line"><span class="type">int</span> nums[<span class="number">7</span>]=&#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">12</span>，<span class="number">15</span>&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">7</span>)&#123;</span><br><span class="line">    <span class="type">int</span> m=nums[i]/<span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span> c_m=m;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num[m]==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        c_m=(c_m+<span class="number">1</span>)&amp;<span class="number">6</span>;</span><br><span class="line">    <span class="keyword">while</span>(c_m!=m);</span><br><span class="line">    num[m]=nums[i];</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述过程中8和15发生冲突，那么我们判断当num[1]不为空时将会依次往下找空空间，知道有空位置就将其放入，就可以顺利将所有的元素放入。</p><hr><h1>4. 资料参考</h1><p>【【一听就懂】算法详解：哈希算法！超详细算法思想讲解，理论+代码实践，带你零基础掌握编程核心算法！】<a href="https://www.bilibili.com/video/BV1aB4y1m7av?vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1aB4y1m7av?vd_source=602097138258a0057a732e44579de1ed</a></p><p>【数据结构与算法基础（青岛大学-王卓）】<a href="https://www.bilibili.com/video/BV1nJ411V7bd?p=22&amp;vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1nJ411V7bd?p=22&amp;vd_source=602097138258a0057a732e44579de1ed</a></p><p>【【纯干货】5分钟!!!让你学会c/c++中结构体struct的用法！】<a href="https://www.bilibili.com/video/BV1vF411n7fe?vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1vF411n7fe?vd_source=602097138258a0057a732e44579de1ed</a></p><p>【哈希究竟代表什么？哈希表和哈希函数的核心原理】<a href="https://www.bilibili.com/video/BV1SZ4y1z7wT?vd_source=602097138258a0057a732e44579de1ed">https://www.bilibili.com/video/BV1SZ4y1z7wT?vd_source=602097138258a0057a732e44579de1ed</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1. 概述&lt;/h1&gt;
&lt;p&gt;哈希地址：是一个逻辑地址&amp;lt;–哈希函数&lt;/p&gt;
&lt;p&gt;哈希取值方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;平方取中法&lt;/li&gt;
&lt;li&gt;取余法&lt;/li&gt;
&lt;li&gt;直接定址法&lt;/li&gt;
&lt;li&gt;折叠法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;哈希冲突：当</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>跳转语句</title>
    <link href="https://www.fomal.cc/posts/68c42004.html"/>
    <id>https://www.fomal.cc/posts/68c42004.html</id>
    <published>2023-11-10T07:55:06.110Z</published>
    <updated>2023-11-16T04:56:32.496Z</updated>
    
    <content type="html"><![CDATA[<h1>1 break语句</h1><ul><li>当在switch中使用时，是用来防止其执行后续语句。</li><li>当在循环语句中使用时，是用来结束循环。</li><li>在嵌套循环结构中使用时会结束离它最近的一层循环。</li></ul><p>用法及其示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    b=<span class="number">5</span>;</span><br><span class="line">    c=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//第一个示例</span></span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;b;a++)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二个示例</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>;c&lt;b;c++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">0</span>;m&lt;b;m++)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        c++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上述例子中，第一个例子，在执行break后佛如循环就结束了，所以第一个例子循环中c的值没有任何变化。在第二个例子中，内层循环由于首先执行了break，所以在外层循环的5次循环中，内层循环都没有开始执行c++就结束了。所以只有外层的c++执行了5次。故c的值增加了5并非25。</p></blockquote><hr><h1>2 continue语句</h1><ul><li>continue 语句是在在循环中想要尽快==结束此次循环并执行下一次循环==时使用。</li></ul><p>示例如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上述实例中，我们将奇数的值直接跳过打印，则当i为基数时执行continue，就跳过了后续执行内容，==跳到i++，不是直接开始下个循环，而是跳到i++==然后再接着去判断执行后续内容。</p></blockquote><hr><h1>3 goto语句</h1><ul><li>goto 语句是无条件跳转语句，再成勋使用中尽量少使用。</li><li>可以在循环内外直接跳转</li></ul><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;12\n&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;34\n&quot;</span>);</span><br><span class="line">    next:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;56\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上述例子中在执行完goto后会自动跳到next执行next后面内容。所以指挥打印12和56。</p></blockquote><p>再看一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ad\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> next;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">next:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cd\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上述例子中，当运行到goto时直接跳过了return执行next后面文件。也就是阻止了程序提前结束。进而在打印了ad后继续打印cd。</p></blockquote><p>接着看下个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    next:</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;qwer\n&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> next;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述例子是一个非常典型的嘶循环例子会不断打印 qwer，时非常危险的一个编写方式。它会不断循环。所以在编写时一定要注意位置，并且最好少用goto语句，甚至是不用。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1 break语句&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;当在switch中使用时，是用来防止其执行后续语句。&lt;/li&gt;
&lt;li&gt;当在循环语句中使用时，是用来结束循环。&lt;/li&gt;
&lt;li&gt;在嵌套循环结构中使用时会结束离它最近的一层循环。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用法及其示例：&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>条件判断句和循环语句</title>
    <link href="https://www.fomal.cc/posts/a5485423.html"/>
    <id>https://www.fomal.cc/posts/a5485423.html</id>
    <published>2023-11-07T00:02:50.483Z</published>
    <updated>2023-11-07T00:14:06.231Z</updated>
    
    <content type="html"><![CDATA[<h1>1 条件判断语句及其用法</h1><h2 id="1-1-if语句">1.1 if语句</h2><h3 id="1-1-1-if的常规用法">1.1.1 if的常规用法</h3><ul><li>if判断语句的基本结构如下</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（判断条件）&#123;</span><br><span class="line">代码块<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">代码块<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若判断条件成立则执行第一个代码块，如果条件不成立就执行第二个代码块。执行其中一个代码块后不再执行另一个直接跳出判断，</span></span><br></pre></td></tr></table></figure><blockquote><p>if的判断条件中只有真和假两种状态，即成立和不成立。在if中如果代码块只有一行代码则可以省略花括号。代码块内容也需要以分号结尾，**而if的整体结构不需要分号结尾，如果 打了分号则会报错。**在条件判断语句中，可以是一个值的判断，也可以是一个式子的判断。==注意：在条件判断中也可以直接写数字，但是除了数字0为假其他所有数字均为真！！！如果条件判断里面是一个非0的数，那么它将永远为真。==</p></blockquote><ul><li>if只跟一行代码的示例如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)</span><br><span class="line">    代码；</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    代码；</span><br></pre></td></tr></table></figure><blockquote><p>那么在多条件下我们可以使用ifelse来进行逐个帅选。即if的嵌套结构。</p></blockquote><ul><li>语法结构如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件<span class="number">1</span>)&#123;</span><br><span class="line">    代码块<span class="number">1</span>；</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>（判断条件<span class="number">2</span>）&#123;</span><br><span class="line">    代码块<span class="number">2</span>；</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>（判断条件<span class="number">3</span>）&#123;</span><br><span class="line">    代码块<span class="number">3</span>；</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    代码块；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上if else if的结构可以一直延伸，中途可以无限加else if的条件判断，但是判断有先后顺序，即从上到下。敲代码时一定要顾及条件的包含关系。</p></blockquote><hr><h3 id="1-1-2-if的扩展用法">1.1.2 if的扩展用法</h3><blockquote><p>在上面我们已经说了if的结构用法，实际上根据不同需求，我们知道if else中如果条件不成立都会执行else，那么如果后续代码很多，我们不想执行else的内容怎能么办呢。实际上if后面不一定必须带else，如果不带else 那么在if条件执行完了后如果为真我们继续执行代码块内容，如果为假则会直接退出if判断，在if else if中也是如此，在多段判定后如果都为假，就会直接退出，没有后续内容。示例如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件<span class="number">1</span>)&#123;</span><br><span class="line">    代码块<span class="number">1</span>；</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>（判断条件<span class="number">2</span>）&#123;</span><br><span class="line">    代码块<span class="number">2</span>；</span><br><span class="line">&#125;.....</span><br><span class="line">    </span><br></pre></td></tr></table></figure><hr><h2 id="1-2-switch语句">1.2 switch语句</h2><blockquote><p>在编程语言中我们还有一种判断语句即switch语句，该语句用于判断逐一数值时用，多用于设计程序按钮的功能键使用，具体结构可以看啊以下示例：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(需要判断的值)</span><br><span class="line">    <span class="keyword">case</span> 符合值<span class="number">1</span>:代码<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> 符合值<span class="number">2</span>:代码<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">......</span><br><span class="line">        <span class="keyword">default</span>:代码n;<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以发现switch将需要判断的值或式子放在括号中，下面用case去配对，其一个一个符合的值。然后再执行后面的代码内容。这里的代码也可以放代码块但时不需要花括号。case可判断的条件也是无限个。==注意：这里代码结束后后面必须加上break，否则当case匹配值符合后不仅执行当前代码，也会将后续还未判断的case值中的代码一并执行了。这里break则是告诉程序，结束的位置。==</p></blockquote><hr><h1>2 循环语句及其用法</h1><h2 id="2-1-while循环">2.1 while循环</h2><p>while循环的结构很简单，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件判断)&#123;</span><br><span class="line">    代码块；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当其中的条件判断为真时执行循环持续到条件为假。如果条件一直为真则会进入死循环。==一定不要写死循环==，while时先判断再循环。</p></blockquote><h2 id="2-2-do-while">2.2 do while</h2><blockquote><p>do while与while最大的区别是先执行一次代码块后再进行判定，然后再决定是否循环。结构如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    代码块;</span><br><span class="line">&#125;<span class="keyword">while</span>（条件判断）</span><br></pre></td></tr></table></figure><blockquote><p>首先do while先执行d后面代码块的内容，再去判定while。</p><p>拓展：根据前文所说，当判断中数字不为0时均为真那么如下有两个特殊示例：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>（<span class="number">1</span>）&#123;</span><br><span class="line">    代码块;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i)&#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两者看起来都是死循环，其实第二个时有限循环，当i大到上限时数据溢出，变为最小值后继续增加，直到i=0时停止，而第一种则是一直为1则一直为真，所以是死循环。</p></blockquote><h2 id="2-3-for">2.3 for</h2><p>for的循环结构为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1 条件判断语句及其用法&lt;/h1&gt;
&lt;h2 id=&quot;1-1-if语句&quot;&gt;1.1 if语句&lt;/h2&gt;
&lt;h3 id=&quot;1-1-1-if的常规用法&quot;&gt;1.1.1 if的常规用法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;if判断语句的基本结构如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>进制及其转换</title>
    <link href="https://www.fomal.cc/posts/f7456bd1.html"/>
    <id>https://www.fomal.cc/posts/f7456bd1.html</id>
    <published>2023-11-07T00:02:50.480Z</published>
    <updated>2023-11-07T00:14:06.233Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>常见进制类型</h1><blockquote><p>我们日常生活中用的大多是10进制很少见到二进制，八进制，十六进制。而在编程中却比较常常听说，但有时还是以10进制为主，我们说机器识别二进制，但是二进制是不能直接从我们的编译器直接输出的。我们的2进制8进制和16进制实际上只是规定满多少进位的标准，2进制为满二进1，8进制满8进1，16进制满16进1，有必要补充一下的是由于阿拉伯数字只有10个即0-9所以在16进制中10-15分别用a-f代替（大小写均可）。</p></blockquote><hr><h3 id="进制应用">进制应用</h3><p>在vs2022（只是本人使用的为vs2022，如果有其他编译器小伙伴也可以自行尝试）中我们可以输入一个十进制数如25，让其转化为8进制和16进制的数，如代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">46</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;转化为16进制小写为%x\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;转化为16进制大写为%X\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;转化为8进制为%o\n&quot;</span>,a);<span class="comment">//注意，此处为字母o不是数字0.（小写）</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果应该为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/blog%5C202310281445200.png" alt="image-20231028144532074"></p><p>那么我们可不可以将直接输入其他进制转化为10进制呢？肯定是可以的。我们可以直接将数值以8进制和16进制，<u>其中8进制赋值必须以0开头，而16进制必须以0x开头，输出时必须也要是整形输出即%d</u>，如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0251</span>;<span class="comment">//以8进制赋值。</span></span><br><span class="line">    <span class="type">int</span> b=<span class="number">0xadc</span>;<span class="comment">//以16进制赋值。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10进制a的值为%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10进制b的值为%d\n&quot;</span>,b);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为输出结果：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/blog%5C202310281442951.png" alt="image-20231028144229714"></p><p>这时候就要注意了，在c语言中时不能直接输入和输出2进制转化的。编译器不能直接转化2进制。赋值时不要直接写2进制！！！赋值时不要直接写2进制！！！赋值时不要直接写2进制！！！</p><hr><h1>进制的转化</h1><p>让电脑帮我们算进制并不难，那么我们自己该如何去实现进制转换呢。</p><p>首先我们来说2进制：除2反序取余法。</p><p>我们来探究一下46转化成2进制时怎样的。如下图：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/blog%5C202310281442235.png" alt="image-20231028144256043"></p><p>最左侧为除数，因为是2进制所以除的是2 ，46/2余数为0，23余数为1依次递推，到最后剩下1或0时结束，并把1或0直接放到余数位。如我的最后剩1直接到余数位，<u>此时得到的2进制是由余数倒序排列而成</u>，我们可以来验算一下，这里我用微软的程序员计算器验算，如图：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/blog%5C202310281443266.png" alt="image-20231028144309143"></p><p>介绍一下，hex是转化为16进制显示，dec即为10进制，oct为8进制，bin为2进制显示，这里结果与我们计算结果相同，只是它默认8位前面的用0补全空位了。</p><p>而我们的8进制和16进制也是同理，用除8反序取余和除16反序取余就可以了。可以看看下面的表格，如表：</p><table><thead><tr><th>10进制</th><th>2进制</th><th>8进制</th><th>16进制</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>F</td></tr><tr><td>16</td><td>1 0000</td><td>20</td><td>10</td></tr></tbody></table><p>可以很直观看出4者的进制差距，并且我们可以观察到他们的共同处：2进制进第4位，8进制进一位；8进制进2位，16进制进1位。这是由于他们的进位成倍数关系导致，这个规律可以邮箱提高进制之间转化而不必每次都要转化为10进制再转化为其他进制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;常见进制类型&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;我们日常生活中用的大多是10进制很少见到二进制，八进制，十六进制。而在编程中却比较常常听说，但有时还是以10进制为主，我们说机器识别二进制，但是二进制是不能直接从我们的编译器直接输出的。我们的2进制8进制和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>计算机内数据储存方式及数据溢出原理</title>
    <link href="https://www.fomal.cc/posts/9108870d.html"/>
    <id>https://www.fomal.cc/posts/9108870d.html</id>
    <published>2023-11-07T00:02:50.478Z</published>
    <updated>2023-11-07T00:14:06.232Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>1 原码</h1><p>原码即计算机的二进制码，特点：</p><ul><li><p>在计算机数据储存中最高位为符号位，正数为0，负数为1</p></li><li><p>除开最高位，剩余位数代表这个数的绝对值大小</p></li><li><p>附属的原码是在其数值绝对值基础上再将最高位变为1</p></li></ul><p>例子（原码）：</p><table><thead><tr><th style="text-align:center">数字</th><th style="text-align:center">原码</th></tr></thead><tbody><tr><td style="text-align:center">+22</td><td style="text-align:center">0001 0110</td></tr><tr><td style="text-align:center">-22</td><td style="text-align:center">1001 0110</td></tr><tr><td style="text-align:center">+33</td><td style="text-align:center">0010 0001</td></tr><tr><td style="text-align:center">-33</td><td style="text-align:center">1010 0001</td></tr></tbody></table><p>原码的表示简单方便，但是在使用过程中，进行运算时，必须比较二者绝对值大小，才能确定计算结果的正负。所以原码不便于使用。所以一般用补码来进行运算。</p><hr><h1>2 反码</h1><p>反码没有赋予功能进行实际使用，他的作用主要是用来过渡补码，作为补码和原码的桥梁。具有以下特点：</p><ul><li>对于正数的原码转换为补码，其二进制码不变。</li><li>对于负数变为补码，符号位不变（即最高位的1不变），剩余位数变为其相反的数（1变为0，0变为1）</li></ul><p>例子（原码和补码转换）：</p><table><thead><tr><th style="text-align:center">数字</th><th style="text-align:center">原码</th><th style="text-align:center">补码</th></tr></thead><tbody><tr><td style="text-align:center">+22</td><td style="text-align:center">0001 0110</td><td style="text-align:center">0001 0110</td></tr><tr><td style="text-align:center">-22</td><td style="text-align:center">1001 0110</td><td style="text-align:center">1110 1001</td></tr><tr><td style="text-align:center">+33</td><td style="text-align:center">0010 0001</td><td style="text-align:center">0010 0001</td></tr><tr><td style="text-align:center">-33</td><td style="text-align:center">1010 0001</td><td style="text-align:center">1101 1110</td></tr></tbody></table><hr><h1>3 补码</h1><p>补码，才是计算机中用来储存数值的正统血脉。为了方便计算计算机的数值一律使用补码储存。具有以下特点：</p><ul><li>在正数中补码与原码和反码相同。</li><li>负数中补码符号位不动其他位变为其相反的数，再加1即得到原码。</li><li>负数中补码是由其反码+1得到</li></ul><p>例子（原码-反码-补码）：</p><table><thead><tr><th style="text-align:center">数字</th><th style="text-align:center">原码</th><th style="text-align:center">反码</th><th style="text-align:center">补码</th></tr></thead><tbody><tr><td style="text-align:center">+22</td><td style="text-align:center">0001 0110</td><td style="text-align:center">0001 0110</td><td style="text-align:center">0001 0110</td></tr><tr><td style="text-align:center">-22</td><td style="text-align:center">1001 0110</td><td style="text-align:center">1110 1001</td><td style="text-align:center">1110 1010</td></tr><tr><td style="text-align:center">+33</td><td style="text-align:center">0010 0001</td><td style="text-align:center">0010 0001</td><td style="text-align:center">0010 0001</td></tr><tr><td style="text-align:center">-33</td><td style="text-align:center">1010 0001</td><td style="text-align:center">1101 1110</td><td style="text-align:center">1101 1111</td></tr></tbody></table><hr><h1>4 补码的意义</h1><p>我们知道0是一个特殊的数字，根据上述三个方式我们可以得到0的两种标答方式即0000 0000来表示（+0）和1000 0000（-0）表示</p><p>那么两种方式不同意怎么办？</p><p>这时候就凸现出补码的作用了。(-0) 的反码为1111 1111，那么它的补码为1 0000 0000（这时首位的1会被舍去）即若最高位符号位进一那么那个1就会被舍去。</p><p>这时(-0)=(+0)=0000 0000。统一了0的编码格式。</p><p>那么如果只是统一0的编码格式也没必要制定如此麻烦的规。这时就不得不提到上文所说的数据的运算困难了。对！没错，它对我们计算机的加减运算也大有作用。</p><p>不过我们需要记住，在计算机运算加减法中所有的减法也视为加法去计算，如16-6=16+（-8）</p><p>我们来看一个例子：</p><ul><li>22+33=55 在计算机运算中是这样的 0001 0110 + 0010 0001=0011 0111 我们转化一下$$1<em>1+1</em>2+1<em>4+1</em>16+1*32=55$$正好符合问哦们的运算结果。</li><li>33-22=33+(-22)=11 在计算机中是这样运算的 0010 0001 + 1110 1010 = 1 0000 1011（这里最高位即符号位进1所以我们直接抹去最高位的1）得到的结果为0000 1011由于符号位为正所以直接转化二进制，得到的数确实为$$1<em>8+1</em>2+1*1=11$$即为我们所得结果。</li><li>22-33=22+(-33)=-11在计算机中是这样运算的 0001 0110 + 1101 1111 = 1111 0101 （结果怎么不对啊！！！（慌张~））这里我们得到的运算结果的符号位为负数，那么我们就要将它转化为原码，先将除了符号位的其他位取反即1000 1010然后我们再加1即 1000 1010+1=1000 1011，我们将他转化为十进制看看：$$1<em>1+1</em>2+1*8=11$$那么它的大小为11，由于符号位为1，所以他的值为-11.结果正确。</li></ul><h1>5 数据溢出</h1><p>看了以上文段，那我们就可以来探究数据溢出是怎么回事了。</p><p>首先我们看只有1个字节的情况（char类型），即只有8位。我们知道最高位为符号位，所以8个1/0中能表示数值大小的只有7位，所以最大为0111 1111得到的数值为$$2^7-1$$</p><p>即+127，那么如果我们再给它+1会怎么样呢？</p><p>即0111 1111 + 0000 0001 = 1000 0000</p><p>结果如上，这时候你肯定有疑问了。（什么？！这不是（-0）吗。），但是我们运行一下编译器看看结果如何。如图：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/202311022220482.png" alt="image-20231102222054431"></p><p>我们运行一下得到结果为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/202311022221295.png" alt="image-20231102222117226"></p><p>（诶！为什么是这个结果），这里我们就需要知道，符号位为1其他位为0时即为最小值$$-2^7$$</p><p>并且我们又可以发现一个事，这里我们直接从最大值变道了最小值，形成了一个闭环。所以我们可以得出char类型的取值范围为（-128）—(127)</p><p>那么我们用sizeof找一下其他类型的空间：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/202311022231246.png" alt="image-20231102223151157"></p><p>输出结果为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/202311022232091.png" alt="image-20231102223232022"></p><ul><li><p>所以short有2位即16位二进制，最大值为$$2^{15}-1$$最小值为$$-2^{15}$$</p></li><li><p>int 和long 类型有4位即32位二进制，最大值为$$2^{31}-1$$最小值为$$-2^{31}$$</p></li><li><p>long long 有8位，即64位二进制，最大值为$$2^{63}-1$$最小值为$$-2^{64}$$</p></li></ul><p>所以问哦们在不同情况下使用不同的类型，可以最大化利用电脑资源，使其不备浪费。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;1 原码&lt;/h1&gt;
&lt;p&gt;原码即计算机的二进制码，特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在计算机数据储存中最高位为符号位，正数为0，负数为1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除开最高位，剩余位数代表这个数的绝对值大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://www.fomal.cc/posts/340249a9.html"/>
    <id>https://www.fomal.cc/posts/340249a9.html</id>
    <published>2023-11-07T00:02:50.476Z</published>
    <updated>2023-11-16T04:56:32.495Z</updated>
    
    <content type="html"><![CDATA[<h1>1 概述</h1><blockquote><p>数组是在程序编程过程过程中把具有相同数据类型的若干数据按有序排列形成的称之为数组。数组的==本质就是在内存中具有相同类型的连续的变量空间==其内部所有的数组成员在内存中的地址是连续的。如果我们定义n个元素的数组，其在内存中表现形式如下图：</p></blockquote><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/image-20231110150133202.png" alt="image-20231110150133202"></p><p>可以看见他们是按顺序放在一起的。</p><hr><h1>2 一维数组</h1><blockquote><p>一维数组的基本代码格式为 数据类型 数组名[元素个数]={第一个元素值，第二个元素值，第三个，。。。}；，当我们去调用时则要写出数组的下标以确定我们需要调用的数组值，==注意：在调用时第一个元素的数组下标为0==，如</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num[<span class="number">3</span>]=&#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">67</span>&#125;;</span><br><span class="line"><span class="comment">//调用第一个元素值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><ul><li>在数组中定义了n个元素则第一个元素下标为0，即  数组名[0] 而最后一个为 数组名[n-1]</li><li>在数组中每个定义的元素占据的空间相当于一个对应类型的一个变量所占用的空间，如上述例子中num的每个元素占据的空间为一个int类型，整个数组为3个int类型空间</li></ul><p>一维数组的其他定义方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num[]=&#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">756</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>在定义数组时可以不写元素个数，在有元素的情况下，电脑会根据元素个数自动开辟对应空间存储元素。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><ul><li>定义数组时可以不写元素对应值，但是必须要有元素个数。</li></ul><p>注意：在定义数组元素个数时不能使用变量，但是可以使用常量，示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line">    num[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> n 5</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">num[n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但当我们不知道数组定义了多少数据时可以用sizeof，如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">num</span>[]=&#123;<span class="number">12</span>,<span class="number">13</span>,<span class="number">41</span>,<span class="number">123</span>,<span class="number">543</span>,<span class="number">645</span>,<span class="number">123</span>,<span class="number">123</span>,<span class="number">534</span>,<span class="number">645</span>,<span class="number">756</span>,<span class="number">234</span>&#125;</span><br><span class="line"><span class="attribute">printf</span>(<span class="string">&quot;数组元素个数为%d&quot;</span>,sizeof(num)/sizeof(num[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure><hr><h1>3 二维数组和多维数组</h1><blockquote><p>在二维数组中格式有一点变化，如</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//为了更直观我们可以这样写</span></span><br><span class="line">num[<span class="number">2</span>][<span class="number">3</span>]=&#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>我们可以了理解为一维是一条线，而二维数组是一个面，类比成平面理解。</li></ul><blockquote><p>在多维数组中我们可以推理类似为三位空间的立方，思维空间等等。三维数组如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num[<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>]=&#123;</span><br><span class="line">    &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;,</span><br><span class="line">    &#123;&#123;<span class="number">6</span>,<span class="number">7</span>&#125;,&#123;<span class="number">8</span>,<span class="number">9</span>&#125;&#125;</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure><ul><li>最简单的记住方法为有几维就套几个花括号</li><li>多维数组的本质都是一维数组。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;1 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;数组是在程序编程过程过程中把具有相同数据类型的若干数据按有序排列形成的称之为数组。数组的==本质就是在内存中具有相同类型的连续的变量空间==其内部所有的数组成员在内存中的地址是连续的。如果我们定义n个元素的数组，其在内存</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c语言中的类型转换</title>
    <link href="https://www.fomal.cc/posts/6749c7e5.html"/>
    <id>https://www.fomal.cc/posts/6749c7e5.html</id>
    <published>2023-11-07T00:02:50.474Z</published>
    <updated>2023-11-07T00:14:06.229Z</updated>
    
    <content type="html"><![CDATA[<hr><h1>什么是类型转换</h1><p>类型转换顾名思义，就是转换量的类型。在c语言中，我们在经常定义了一个int类型，即为整数型的变量，那么在输出int类型时我们根据生活中一些问题会发现它需要改为float类型，即为浮点型，否则他就会吞掉你的小数点后面的数字。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a/<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>那么我们得到的结果为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>那么这里显然程序把我们本来有的2.5的.5吞了（这不明摆着抢劫嘛！！）。所以为了避免程序吞掉我们的东西，我们得提前给他转换类型来保护我们的财产。谨防程序盗贼！！</p><hr><h1>类型转换类型</h1><p>在c语言中类型转换分为自动转换（隐式转换）和强制转换。</p><ul><li>自动转换（隐式转换）：即由编译系统自己完成的我转换，遵循一定规则。</li><li>强制转换：即根据自己需求清醒将数据转化为自己需要的类型。</li></ul><p>首先我们看个隐式转换例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假定我们在买水果。</span></span><br><span class="line"><span class="comment">//水果单价为2.3元一斤。</span></span><br><span class="line"><span class="type">float</span> price=<span class="number">2.5</span>;</span><br><span class="line"><span class="comment">//假定我们买5斤。</span></span><br><span class="line"><span class="type">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="comment">//那么我们的价格是多少呢</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">    <span class="type">float</span> all1=num*price;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,all1);</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="type">int</span> all2=num*price;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,all2);</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="type">double</span> all3=num*price;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,all3);</span><br></pre></td></tr></table></figure><p>那么他们分别输出的是：</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/blog%5C202310292358962.png" alt="image-20231029235804892"></p><p>但是按照严格意义上来讲只有第三种是正确的，第二种不出所料地偷走了我们的小数点，第一种不是很规范。</p><p>接着我们看一个强制转换类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//还是买水果</span></span><br><span class="line"><span class="type">float</span> price=<span class="number">2.5</span>;</span><br><span class="line"><span class="comment">//我们还是买5斤</span></span><br><span class="line"><span class="type">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="comment">//价格为</span></span><br><span class="line"><span class="type">int</span> all=(<span class="type">int</span>)price*num;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,all);</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/blog%5C202310300807469.png" alt="image-20231030080719418"></p><p>这里我们发现，输出结果为10，为什么不是12或者13呢。原因是，我们在price前面加上了（int）后首先会将2.5中的.5抹除（砍价党狂喜），然后再进行计算。</p><p>那么这里老板就不愿意了怎么办呢？接下来再看个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> price=<span class="number">2.5</span>;</span><br><span class="line"><span class="type">int</span> num=<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> all=(<span class="type">int</span>)（price*num）;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,all);</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/blog%5C202310300811659.png" alt="image-20231030081149625"></p><p>这里我们发现原本12.5变成了12。老板给我门抹了个0（虽然没有上次优惠的多）。这里分析一下代码，程序首先将price *num计算完再进行的类型转换，导致12.5抹去了.5。所以说啊讲价前一定要讲单价（砍价党秘诀）。</p><hr><h1>类型转换规则</h1><p>在类型转化中，我们可以用一个图来展示雷响转化的规则。</p><p><img src="https://lysnowq.oss-cn-shenzhen.aliyuncs.com/blog%5C202310300817229.png" alt="image-20231030081725173"></p><ul><li>原则：占用内存字节数少(值域小)的类型，向占用内存字节数多(值域大)的类型转换，以保证精度不降低。</li></ul><p>当然这句话反过来就印证了我们上面的情况，即占用字节多的向占用字节少的转换精度会降低，就出现了吞小数点的情况。</p><p>在类型转换中（）称之为类型转换符，在一个变量前加上只对一个变量进行转换，如果是一个式子就要用括号括起来。原因是（的优先级为2级，比运算符的优先级要高，所以要用括号括起来）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1&gt;什么是类型转换&lt;/h1&gt;
&lt;p&gt;类型转换顾名思义，就是转换量的类型。在c语言中，我们在经常定义了一个int类型，即为整数型的变量，那么在输出int类型时我们根据生活中一些问题会发现它需要改为float类型，即为浮点型，否则他就会吞掉你的小数点后面的数字。例如：&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C语言的常量变量</title>
    <link href="https://www.fomal.cc/posts/a2a2a425.html"/>
    <id>https://www.fomal.cc/posts/a2a2a425.html</id>
    <published>2023-11-07T00:02:50.464Z</published>
    <updated>2023-11-07T00:14:06.228Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h1>一  变量</h1><hr><h2 id="1-整形。">1 整形。</h2><hr><h3 id="分类">分类</h3><ul><li>在c中整形主要有short  int  long   long long四种类型。</li></ul><hr><h3 id="short">short</h3><ul><li><p>short是短整形，其占用空间比int类型更小，但是所能表达的数字也更小。在程序设计中一般用于数值不大的数。</p></li><li><p>占用2个字节。</p></li></ul><h3 id="int">int</h3><ul><li><p>int是大多数人最初接触的整形值，比如int main来声明一个主函数，而int实际上也是用来声明一个整形变量。</p></li><li><p>占用4个字节。</p></li></ul><h3 id="long和long-long">long和long long</h3><ul><li><p>long相较于int可以容纳更大的数值，多用于一些数据较大的场合，比如金融行业。</p></li><li><p>占用8和16个字节。</p></li></ul><hr><h3 id="总结">总结</h3><ul><li>short &lt; int &lt;long &lt;long long</li></ul><hr><h2 id="2-浮点型">2 浮点型</h2><hr><h3 id="分类-2">分类</h3><ul><li>浮点型主要分为float double 和long double</li></ul><hr><h4 id="介绍">介绍</h4><ul><li>float和double以及long double没有具体的占位大小只有确定的大小关系。<ul><li>float &lt;=double&lt;=long double</li></ul></li><li>也就是说在不同计算机中浮点型的大小不同。具体必须结合自己的计算机来看，没有统一标准。</li></ul><hr><h1>二 常量</h1><hr><h3 id="介绍-2">介绍</h3><ul><li>常量主要有两种方式来定义：</li><li>以下为第一种，用define定义，如图示例。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> c 14</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以下是第二种，用const定义，如图示例。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio,h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c = <span class="number">10</span> ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>define是定义全局常量，可以在其他函数中调用，比较安全。</li><li>而const定义只能在自己所在的函数体里运用，相比于define不那么安全。</li><li>在平常中我们建议使用define去定义常量。</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;h1&gt;一  变量&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-整形。&quot;&gt;1 整形。&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&quot;分类&quot;&gt;分类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在c中整形主要有short  int  long   long long四种类型。&lt;/li&gt;
&lt;/u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法与外挂标签写法汇总</title>
    <link href="https://www.fomal.cc/posts/2013454d.html"/>
    <id>https://www.fomal.cc/posts/2013454d.html</id>
    <published>2022-08-09T10:19:03.000Z</published>
    <updated>2022-10-23T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">🥧本文汇总Markdown格式以及外挂标签在网页端的渲染效果，可作为文档进行查询</summary>
    
    
    
    <category term="演示" scheme="https://www.fomal.cc/categories/%E6%BC%94%E7%A4%BA/"/>
    
    
    <category term="Markdown" scheme="https://www.fomal.cc/tags/Markdown/"/>
    
    <category term="外挂标签" scheme="https://www.fomal.cc/tags/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
</feed>
